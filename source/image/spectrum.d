module image.spectrum;

import config;
import std.traits;
import std.math;
import image.color;

enum uint[600] WaveSpectrum = [196609, 196609, 196609, 196609, 65556, 65556, 65556, 65556, 327697, 
1114132, 1310756, 1310756, 1310756, 1638433, 1638433, 1245236, 1245236, 2162737, 2162737, 2162737, 
2555974, 2555974, 2555974, 2555974, 2359377, 2359377, 2359377, 3211350, 3211350, 3342418, 3604580, 
3342418, 3604580, 3604580, 3604580, 3145825, 3145825, 3342451, 3145825, 3342451, 3342451, 3473528, 
3473528, 3473528, 4456579, 4259955, 4456579, 4456579, 4587648, 4587648, 4587648, 4587648, 4194451, 
4194451, 4391057, 4194451, 4391057, 4391057, 4391057, 5242884, 5242884, 5242884, 5242884, 5242884, 
4521985, 4521985, 4521985, 4521985, 4456467, 4521985, 4456467, 4456467, 4456467, 4390930, 4390930, 
4390930, 4390930, 4390930, 4390930, 4325412, 4325412, 4325412, 4325412, 4259874, 4259874, 4259874, 
4259874, 4259874, 4784179, 4784179, 4784179, 4784179, 4784179, 4522038, 4522038, 4522038, 4259897, 
4259897, 4259897, 3277107, 3277107, 3277107, 3277107, 3277107, 3277107, 3604789, 3604789, 3604789, 
3277107, 3342658, 3342658, 3342658, 3342658, 2294342, 2294342, 2294342, 2294342, 2687561, 2687561, 
2687561, 2491968, 2491968, 2491968, 2294082, 2294082, 2294082, 2167364, 2167364, 2167364, 2167364, 
1316677, 1316677, 1119057, 1119057, 1119057, 1119057, 1647442, 1517139, 1647442, 1517139, 1384788, 
1384788, 1384788, 1384788, 1126998, 1126998, 1126998, 1126998, 274520, 274520, 274520, 274520, 148310, 
148310, 148310, 82517, 82517, 82517, 611411, 611411, 611411, 545617, 545617, 545617, 484165, 484165, 
417860, 417860, 292673, 417860, 292673, 292673, 292673, 292673, 164681, 164681, 164681, 164681, 98886, 
98886, 98886, 98886, 102722, 104242, 104242, 103221, 103221, 103221, 103221, 66096, 67106, 67106, 67106, 
805, 805, 4384, 4384, 5393, 5393, 5393, 5393, 4628, 4628, 8962, 8962, 8962, 8962, 8452, 8452, 9362, 9362, 
9362, 9362, 9362, 9619, 9619, 9601, 9601, 9601, 9604, 9604, 12402, 12402, 12402, 12402, 12404, 12404, 12404, 
12641, 12641, 12642, 12642, 12625, 12625, 12625, 12884, 12884, 12884, 12865, 12865, 12614, 12614, 12614, 
12614, 9010, 9010, 9010, 9010, 9010, 8244, 8244, 8244, 10277, 10277, 10016, 10016, 10016, 9251, 9251, 
9251, 9251, 9251, 5139, 9251, 9251, 5139, 5139, 5139, 5139, 4352, 4352, 4352, 5139, 4352, 4352, 4352, 
4352, 4352, 4352, 4352, 4352, 5888, 4352, 4352, 6404, 5888, 5888, 4352, 6404, 4352, 6404, 5888, 5888, 
6404, 5888, 5888, 6404, 5888, 5888, 5888, 5888, 5888, 5888, 5888, 6404, 6404, 5888, 6404, 5888, 6404, 
4352, 6404, 5888, 4352, 4352, 6404, 4352, 6404, 4352, 4352, 6404, 4352, 4352, 4352, 4352, 4352, 4352, 
4352, 4352, 4352, 4352, 70913, 70913, 70913, 70913, 1515776, 70913, 70913, 2302984, 2302984, 2302984, 
2172423, 2172423, 2172423, 3286790, 3286790, 3286790, 3221765, 4399364, 4399364, 4399364, 4399364, 4268803, 
5645570, 5645570, 5645570, 5645570, 5451777, 6500864, 6500864, 6500864, 6435328, 6435328, 6435328, 7680768, 
7680768, 7680768, 7418624, 8598528, 7418624, 8598528, 8598528, 8467456, 8467456, 8467456, 9712640, 9712640, 
9712640, 9581824, 9581824, 9581824, 275712, 275712, 79104, 275712, 1259008, 1259008, 1259008, 1259008, 1193216, 
1193216, 1193216, 2371840, 2371840, 2371840, 2371840, 2171904, 2171904, 2171904, 2171904, 3350528, 3350528, 
3350528, 3350528, 3286528, 3286528, 3286528, 4465152, 4465152, 4465152, 4465152, 4465152, 5443840, 4465152, 
4465152, 5773312, 5443840, 5443840, 5773312, 5773312, 5247744, 5247744, 5247744, 5247744, 5247744, 5243136, 
5243136, 5309184, 5243136, 5309184, 5309184, 5309184, 5411072, 5411072, 5411072, 5411072, 5477120, 5477120, 
5477120, 5472768, 5472768, 5472768, 5472768, 5472768, 5538816, 5538816, 5538816, 5538816, 5599744, 5599744, 
5599744, 5600256, 5600256, 5600256, 5600256, 5595648, 5595648, 5595648, 5595648, 5595648, 5595904, 5595904, 
5595904, 5595904, 5591296, 5595904, 5591296, 5591296, 5591296, 5591808, 5591808, 5591808, 5591808, 5587200, 
5591808, 5587200, 5587200, 5587200, 5587712, 5587712, 5587712, 5587712, 5587712, 5583104, 5583104, 5587712, 
5583104, 5583104, 5583104, 5583104, 5583104, 5583616, 5583104, 5583616, 5583616, 5583616, 5583616, 5583616, 
5579009, 5583616, 5583616, 5579009, 5579009, 5579009, 5579009, 5579009, 5579009, 5448705, 5579009, 5448705, 
5448705, 5448705, 5448705, 5379073, 5448705, 5379073, 5379073, 5379073, 5379073, 5379073, 4329729, 4329729, 
4329729, 4329729, 4329729, 4593664, 4593664, 4593664, 4265472, 4265472, 3281664, 3281664, 3281664, 3281664, 
3281664, 3543040, 3543040, 3277824, 3277824, 3277824, 3277824, 2228992, 2228992, 2294272, 2294272, 1114368, 
1114368, 1114368, 1114368, 1310720, 1310720, 198912, 198912, 263936, 263936, 263936, 9569792, 9569792, 9569792, 
9635072, 9635072, 9635072, 9635072, 8455168, 8455168, 8651520, 8651520, 8651520, 8651520, 7471616, 7471616, 
7537152, 7537152, 7537152, 6685184, 6685184, 6685184, 5636352, 5636352, 5636352, 5636352, 4587776, 4587776, 
4587776, 3604736, 3604736, 3604736, 3604736, 2687232, 2687232, 2687232, 2687232, 1245184, 1245184, 1310720, 
1310720, 524294, 524294, 524294, 196609];

/**
 * Converts wave length to RGB color
 **/
Color GetSpectrumColor(fpnum WaveLength)
{
	if((!WaveLength.isFinite)||(WaveLength<=300.0)||(WaveLength>=750.0))
	{
		return Color(0.0,0.0,0.0);
	}
	int W1 = cast(int)floor(WaveLength);
	int W2 = cast(int)ceil(WaveLength);
	fpnum D = WaveLength - W1;
	W1 -= 230;
	W2 -= 230;
	if(W1==W2)
	{
		return Color.fromUint(WaveSpectrum[W1]);
	}
	else
	{
		import math.interpolation;
		return LinearInterpolation(Color.fromUint(WaveSpectrum[W1]), Color.fromUint(WaveSpectrum[W2]), D);
	}
}

/+
/* XPM */
/* 530 : 300 */
enum string[] SpectrumCD = [/* columns rows colors chars-per-pixel */
//"600 1 166 2 ",
"  	c #000000",
". 	c #030001",
"+ 	c #0B0014",
"@ 	c #0F001B",
"# 	c #11001E",
"$ 	c #140024",
"% 	c #19002B",
"& 	c #1D0034",
"* 	c #21003B",
"= 	c #270046",
"- 	c #2E0051",
"; 	c #310056",
"> 	c #33005C",
", 	c #370064",
"' 	c #3A006B",
") 	c #3D0073",
"! 	c #41007D",
"~ 	c #4A0093",
"{ 	c #4D009B",
"] 	c #5000A4",
"^ 	c #4F00AB",
"/ 	c #4E00B3",
"( 	c #4D00BC",
"_ 	c #4C00C4",
": 	c #4B00CC",
"< 	c #4900D3",
"[ 	c #4500D6",
"} 	c #4100D9",
"| 	c #3C01DD",
"1 	c #3301E2",
"2 	c #2D02E6",
"3 	c #2902E9",
"4 	c #2606EA",
"5 	c #230BEC",
"6 	c #2112EE",
"7 	c #1E17EF",
"8 	c #1B1DF1",
"9 	c #1923F2",
"0 	c #1726F3",
"a 	c #152BF4",
"b 	c #1132F6",
"c 	c #0E3AF8",
"d 	c #0C43F6",
"e 	c #0B4CF5",
"f 	c #0954F3",
"g 	c #085DF1",
"h 	c #0763EF",
"i 	c #066AEE",
"j 	c #0477EB",
"k 	c #0283E9",
"l 	c #018CE6",
"m 	c #0191E2",
"n 	c #0197DC",
"o 	c #019DD5",
"p 	c #01A2D0",
"q 	c #01A6CC",
"r 	c #00ADC5",
"s 	c #00B1C0",
"t 	c #00B5BB",
"u 	c #00C3AC",
"v 	c #00CBA4",
"w 	c #00CE9C",
"x 	c #00CF93",
"y 	c #00CF8B",
"z 	c #00CF84",
"A 	c #00D07C",
"B 	c #00D074",
"C 	c #00D16B",
"D 	c #00D162",
"E 	c #00D15B",
"F 	c #00D254",
"G 	c #00D24B",
"H 	c #00D146",
"I 	c #00CF42",
"J 	c #00CD3C",
"K 	c #00CA34",
"L 	c #00C82F",
"M 	c #00C72A",
"N 	c #00C423",
"O 	c #00C21B",
"P 	c #17C10A",
"Q 	c #00BB0A",
"R 	c #00B904",
"S 	c #00B700",
"T 	c #00BE13",
"U 	c #0BBF0B",
"V 	c #23C408",
"W 	c #2BC607",
"X 	c #32C706",
"Y 	c #3BC905",
"Z 	c #43CB04",
"` 	c #4BCD03",
" .	c #56CF02",
"..	c #5DD001",
"+.	c #63D200",
"@.	c #6CD200",
"#.	c #75D300",
"$.	c #7BD300",
"%.	c #83D400",
"&.	c #8BD400",
"*.	c #94D400",
"=.	c #9CD500",
"-.	c #A4D500",
";.	c #ABD500",
">.	c #B3D600",
",.	c #BCD500",
"'.	c #C4D100",
").	c #CBCE00",
"!.	c #D3CA00",
"~.	c #DCC600",
"{.	c #E4C200",
"].	c #F8B800",
"^.	c #F3BB00",
"/.	c #FAB300",
"(.	c #FAAB00",
"_.	c #FBA300",
":.	c #FC9B00",
"<.	c #FD9300",
"[.	c #FD8C00",
"}.	c #FE8400",
"|.	c #FF7C00",
"1.	c #FF7400",
"2.	c #FF6C00",
"3.	c #FF6300",
"4.	c #FF5B00",
"5.	c #FF5300",
"6.	c #FF4B00",
"7.	c #FF4300",
"8.	c #FF3B00",
"9.	c #FF3300",
"0.	c #FF2B01",
"a.	c #FD2401",
"b.	c #F21E01",
"c.	c #EC1B01",
"d.	c #E61800",
"e.	c #E11600",
"f.	c #DC1300",
"g.	c #D20E00",
"h.	c #D61000",
"i.	c #CC0D00",
"j.	c #C30C00",
"k.	c #BB0B00",
"l.	c #B40A00",
"m.	c #AD0900",
"n.	c #A40700",
"o.	c #9C0600",
"p.	c #930500",
"q.	c #8B0400",
"r.	c #840300",
"s.	c #7C0200",
"t.	c #730200",
"u.	c #660200",
"v.	c #560100",
"w.	c #460100",
"x.	c #370100",
"y.	c #290100",
"z.	c #1D0000",
"A.	c #140000",
"B.	c #080006",
"C.	c #00BCB4",
"D.	c #46008A",
"E.	c #3701DF",
"F.	c #EBBE00",
"G.	c #48008F",
"H.	c #3F0078",
"I.	c #440083",
"J.	c #F62001"
];

enum string SpectrumCS = ". . . . + + + + @ # $ $ $ % % & & * * * = = = = - - - ; ; > , > , , , ' ' ) ' ) ) H.H.H.I.! I.I.D.D.D.D.~ ~ { ~ { { { ] ] ] ] ] ^ ^ ^ ^ / ^ / / / ( ( ( ( ( ( _ _ _ _ : : : : : < < < < < [ [ [ } } } | | | | | | E.E.E.| 1 1 1 1 2 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 6 7 7 8 8 8 8 9 0 9 0 a a a a b b b b c c c c d d d e e e f f f g g g h h i i j i j j j j k k k k l l l l m n n o o o o p q q q r r s s t t t t C.C.u u u u v v w w w w w x x y y y z z A A A A B B B C C D D E E E F F F G G H H H H J J J J J K K K L L M M M N N N N N T N N T T T T Q Q Q T Q Q Q Q Q Q Q Q S Q Q R S S Q R Q R S S R S S R S S S S S S S R R S R S R Q R S Q Q R Q R Q Q R Q Q Q Q Q Q Q Q Q Q U U U U P U U V V V W W W X X X Y Z Z Z Z `  . . . ...+.+.+.@.@.@.#.#.#.$.%.$.%.%.&.&.&.*.*.*.=.=.=.-.-.;.-.>.>.>.>.,.,.,.'.'.'.'.).).).).!.!.!.!.~.~.~.{.{.{.{.{.^.{.{.].^.^.].]./././././.(.(._.(._._._.:.:.:.:.<.<.<.[.[.[.[.[.}.}.}.}.|.|.|.1.1.1.1.2.2.2.2.2.3.3.3.3.4.3.4.4.4.5.5.5.5.6.5.6.6.6.7.7.7.7.7.8.8.7.8.8.8.8.8.9.8.9.9.9.9.9.0.9.9.0.0.0.0.0.0.a.0.a.a.a.a.b.a.b.b.b.b.b.c.c.c.c.c.d.d.d.e.e.f.f.f.f.f.h.h.g.g.g.g.i.i.j.j.k.k.k.k.l.l.m.m.n.n.n.o.o.o.p.p.p.p.q.q.r.r.r.r.s.s.t.t.t.u.u.u.v.v.v.v.w.w.w.x.x.x.x.y.y.y.y.z.z.A.A.B.B.B..   ";

uint hdigit(char c)
{
	if(c>='0'&&c<='9')return c-'0';
	if(c>='A'&&c<='F')return c-'A';
	if(c>='a'&&c<='f')return c-'a';
	return 0;
}

uint[] CTableGen()
{
	uint[] Tbl;
	Tbl.length = 600;
	uint[string] Color;
	foreach(ent; SpectrumCD)
	{
		string ee =ent[6..$];
		uint V;
		V = ee[5].hdigit + ee[4].hdigit * (1u<<4u) + ee[3].hdigit * (1u<<8u) + ee[2].hdigit * (1u<<12u) + ee[1].hdigit * (1u<<16u) + ee[0].hdigit * (1u<<20u);
		Color[ent[0..2]] = V;
	}
	for(int i=0;i<600;i++)
	{
		Tbl[i] = Color[SpectrumCS[2*i..2*i+2]];
	}
	return Tbl;
}
uint[] CTable;
shared static this()
{
	import std.stdio;
	CTable = CTableGen();
	writeln(CTable);
}+/


