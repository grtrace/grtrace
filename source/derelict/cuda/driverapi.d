/*
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module derelict.cuda.driverapi;

/**
 * CUDA Driver API
 * Translation of cuda.h
 */

// Current API version supported by DerelictCUDA is 6.5
enum CUDA_VERSION = 6050;


import derelict.util.loader;

private
{
    import derelict.util.system;

    static if(Derelict_OS_Windows)
        enum libNames = "nvcuda.dll";
    else static if (Derelict_OS_Mac)
        enum libNames = "libcuda.dylib";
    else static if (Derelict_OS_Linux)
        enum libNames = "libcuda.so";
    else
        static assert(0, "Need to implement CUDA libNames for this operating system.");
}

alias CUdeviceptr = size_t;

alias CUdevice = int;
alias CUcontext = void*;
alias CUmodule = void*;
alias CUfunction = void*;
alias CUarray = void*;
alias CUmipmappedArray = void*;
alias CUtexref = void*;
alias CUsurfref = void*;
alias CUevent = void*;
alias CUstream = void*;
alias CUgraphicsResource = void*;
alias CUtexObject = ulong;
alias CUsurfObject = ulong;

struct CUuuid
{
    char[16] bytes;
}

enum CU_IPC_HANDLE_SIZE = 64;

struct CUipcEventHandle
{
    char[CU_IPC_HANDLE_SIZE] reserved;
}

struct CUipcMemHandle
{
    char[CU_IPC_HANDLE_SIZE] reserved;
}

alias CUipcMem_flags = int;
enum : CUipcMem_flags
{
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1
}

alias CUmemAttach_flags = int;
enum : CUmemAttach_flags
{
    CU_MEM_ATTACH_GLOBAL = 0x1,
    CU_MEM_ATTACH_HOST   = 0x2,
    CU_MEM_ATTACH_SINGLE = 0x4
}

alias CUctx_flags = int;
enum : CUctx_flags
{
    CU_CTX_SCHED_AUTO          = 0x00,
    CU_CTX_SCHED_SPIN          = 0x01,
    CU_CTX_SCHED_YIELD         = 0x02,
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04,
    CU_CTX_BLOCKING_SYNC       = 0x04,
    CU_CTX_SCHED_MASK          = 0x07,
    CU_CTX_MAP_HOST            = 0x08,
    CU_CTX_LMEM_RESIZE_TO_MAX  = 0x10,
    CU_CTX_FLAGS_MASK          = 0x1f
}

alias CUstream_flags = int;
enum : CUstream_flags
{
    CU_STREAM_DEFAULT      = 0x0,
    CU_STREAM_NON_BLOCKING = 0x1
}

alias CUevent_flags = int;
enum : CUevent_flags
{
    CU_EVENT_DEFAULT        = 0x0,
    CU_EVENT_BLOCKING_SYNC  = 0x1,
    CU_EVENT_DISABLE_TIMING = 0x2,
    CU_EVENT_INTERPROCESS   = 0x4
}

alias CUarray_format = int;
enum : CUarray_format
{
    CU_AD_FORMAT_UNSIGNED_INT8  = 0x01,
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02,
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03,
    CU_AD_FORMAT_SIGNED_INT8    = 0x08,
    CU_AD_FORMAT_SIGNED_INT16   = 0x09,
    CU_AD_FORMAT_SIGNED_INT32   = 0x0a,
    CU_AD_FORMAT_HALF           = 0x10,
    CU_AD_FORMAT_FLOAT          = 0x20
}

alias CUaddress_mode = int;
enum : CUaddress_mode
{
    CU_TR_ADDRESS_MODE_WRAP   = 0,
    CU_TR_ADDRESS_MODE_CLAMP  = 1,
    CU_TR_ADDRESS_MODE_MIRROR = 2,
    CU_TR_ADDRESS_MODE_BORDER = 3
}

alias CUfilter_mode = int;
enum : CUfilter_mode
{
    CU_TR_FILTER_MODE_POINT  = 0,
    CU_TR_FILTER_MODE_LINEAR = 1
}

alias CUdevice_attribute = int;
enum : CUdevice_attribute
{
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
    CU_DEVICE_ATTRIBUTE_MAX
}

struct CUdevprop
{
    int maxThreadsPerBlock;
    int[3] maxThreadsDim;
    int[3] maxGridSize;
    int sharedMemPerBlock;
    int totalConstantMemory;
    int SIMDWidth;
    int memPitch;
    int regsPerBlock;
    int clockRate;
    int textureAlign;
}

alias CUpointer_attribute = int;
enum : CUpointer_attribute
{
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8
}

alias CUfunction_attribute = int;
enum : CUfunction_attribute
{
    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,
    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,
    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,
    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,
    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,
    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    CU_FUNC_ATTRIBUTE_MAX
}

alias CUfunc_cache = int;
enum : CUfunc_cache
{
    CU_FUNC_CACHE_PREFER_NONE    = 0x00,
    CU_FUNC_CACHE_PREFER_SHARED  = 0x01,
    CU_FUNC_CACHE_PREFER_L1      = 0x02,
    CU_FUNC_CACHE_PREFER_EQUAL   = 0x03
}

alias CUsharedconfig = int;
enum : CUsharedconfig
{
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE    = 0x00,
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE  = 0x01,
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02
}

alias CUmemorytype = int;
enum : CUmemorytype
{
    CU_MEMORYTYPE_HOST    = 0x01,
    CU_MEMORYTYPE_DEVICE  = 0x02,
    CU_MEMORYTYPE_ARRAY   = 0x03,
    CU_MEMORYTYPE_UNIFIED = 0x04
}


alias CUcomputemode = int;
enum : CUcomputemode
{
    CU_COMPUTEMODE_DEFAULT           = 0,
    CU_COMPUTEMODE_EXCLUSIVE         = 1,
    CU_COMPUTEMODE_PROHIBITED        = 2,
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
}


alias CUjit_option = int;
enum : CUjit_option
{
    CU_JIT_MAX_REGISTERS = 0,
    CU_JIT_THREADS_PER_BLOCK,
    CU_JIT_WALL_TIME,
    CU_JIT_INFO_LOG_BUFFER,
    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
    CU_JIT_ERROR_LOG_BUFFER,
    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
    CU_JIT_OPTIMIZATION_LEVEL,
    CU_JIT_TARGET_FROM_CUCONTEXT,
    CU_JIT_TARGET,
    CU_JIT_FALLBACK_STRATEGY,
    CU_JIT_GENERATE_DEBUG_INFO,
    CU_JIT_LOG_VERBOSE,
    CU_JIT_GENERATE_LINE_INFO,
    CU_JIT_CACHE_MODE,
    CU_JIT_NUM_OPTIONS
}

alias CUjit_target = int;
enum : CUjit_target
{
    CU_TARGET_COMPUTE_10 = 10,
    CU_TARGET_COMPUTE_11 = 11,
    CU_TARGET_COMPUTE_12 = 12,
    CU_TARGET_COMPUTE_13 = 13,
    CU_TARGET_COMPUTE_20 = 20,
    CU_TARGET_COMPUTE_21 = 21,
    CU_TARGET_COMPUTE_30 = 30,
    CU_TARGET_COMPUTE_32 = 32,
    CU_TARGET_COMPUTE_35 = 35,
    CU_TARGET_COMPUTE_37 = 37,
    CU_TARGET_COMPUTE_50 = 50
}

alias CUjit_fallback = int;
enum : CUjit_fallback
{
    CU_PREFER_PTX = 0,
    CU_PREFER_BINARY
}


alias CUjit_cacheMode = int;
enum : CUjit_cacheMode
{
    CU_JIT_CACHE_OPTION_NONE = 0,
    CU_JIT_CACHE_OPTION_CG,
    CU_JIT_CACHE_OPTION_CA
}

alias CUjitInputType = int;
enum : CUjitInputType
{
    CU_JIT_INPUT_CUBIN = 0,
    CU_JIT_INPUT_PTX,
    CU_JIT_INPUT_FATBINARY,
    CU_JIT_INPUT_OBJECT,
    CU_JIT_INPUT_LIBRARY,
    CU_JIT_NUM_INPUT_TYPES
}

alias CUlinkState = void*;

alias CUgraphicsRegisterFlags = int;
enum : CUgraphicsRegisterFlags
{
    CU_GRAPHICS_REGISTER_FLAGS_NONE           = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY      = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD  = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST   = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
}

alias CUgraphicsMapResourceFlags = int;
enum : CUgraphicsMapResourceFlags
{
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE          = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
}

alias CUarray_cubemap_face = int;
enum : CUarray_cubemap_face
{
    CU_CUBEMAP_FACE_POSITIVE_X  = 0x00,
    CU_CUBEMAP_FACE_NEGATIVE_X  = 0x01,
    CU_CUBEMAP_FACE_POSITIVE_Y  = 0x02,
    CU_CUBEMAP_FACE_NEGATIVE_Y  = 0x03,
    CU_CUBEMAP_FACE_POSITIVE_Z  = 0x04,
    CU_CUBEMAP_FACE_NEGATIVE_Z  = 0x05
}

alias CUlimit = int;
enum : CUlimit
{
    CU_LIMIT_STACK_SIZE                       = 0x00,
    CU_LIMIT_PRINTF_FIFO_SIZE                 = 0x01,
    CU_LIMIT_MALLOC_HEAP_SIZE                 = 0x02,
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH           = 0x03,
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04,
    CU_LIMIT_MAX
}

alias CUresourcetype = int;
enum : CUresourcetype
{
    CU_RESOURCE_TYPE_ARRAY           = 0x00,
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01,
    CU_RESOURCE_TYPE_LINEAR          = 0x02,
    CU_RESOURCE_TYPE_PITCH2D         = 0x03
}

alias CUresult = int;
enum : CUresult
{
    CUDA_SUCCESS                              = 0,
    CUDA_ERROR_INVALID_VALUE                  = 1,
    CUDA_ERROR_OUT_OF_MEMORY                  = 2,
    CUDA_ERROR_NOT_INITIALIZED                = 3,
    CUDA_ERROR_DEINITIALIZED                  = 4,
    CUDA_ERROR_PROFILER_DISABLED              = 5,
    CUDA_ERROR_PROFILER_NOT_INITIALIZED       = 6,
    CUDA_ERROR_PROFILER_ALREADY_STARTED       = 7,
    CUDA_ERROR_PROFILER_ALREADY_STOPPED       = 8,
    CUDA_ERROR_NO_DEVICE                      = 100,
    CUDA_ERROR_INVALID_DEVICE                 = 101,
    CUDA_ERROR_INVALID_IMAGE                  = 200,
    CUDA_ERROR_INVALID_CONTEXT                = 201,
    CUDA_ERROR_CONTEXT_ALREADY_CURRENT        = 202,
    CUDA_ERROR_MAP_FAILED                     = 205,
    CUDA_ERROR_UNMAP_FAILED                   = 206,
    CUDA_ERROR_ARRAY_IS_MAPPED                = 207,
    CUDA_ERROR_ALREADY_MAPPED                 = 208,
    CUDA_ERROR_NO_BINARY_FOR_GPU              = 209,
    CUDA_ERROR_ALREADY_ACQUIRED               = 210,
    CUDA_ERROR_NOT_MAPPED                     = 211,
    CUDA_ERROR_NOT_MAPPED_AS_ARRAY            = 212,
    CUDA_ERROR_NOT_MAPPED_AS_POINTER          = 213,
    CUDA_ERROR_ECC_UNCORRECTABLE              = 214,
    CUDA_ERROR_UNSUPPORTED_LIMIT              = 215,
    CUDA_ERROR_CONTEXT_ALREADY_IN_USE         = 216,
    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED        = 217,
    CUDA_ERROR_INVALID_PTX                    = 218,
    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT       = 219,
    CUDA_ERROR_INVALID_SOURCE                 = 300,
    CUDA_ERROR_FILE_NOT_FOUND                 = 301,
    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,
    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED      = 303,
    CUDA_ERROR_OPERATING_SYSTEM               = 304,
    CUDA_ERROR_INVALID_HANDLE                 = 400,
    CUDA_ERROR_NOT_FOUND                      = 500,
    CUDA_ERROR_NOT_READY                      = 600,
    CUDA_ERROR_ILLEGAL_ADDRESS                = 700,
    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES        = 701,
    CUDA_ERROR_LAUNCH_TIMEOUT                 = 702,
    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING  = 703,
    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED    = 704,
    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED        = 705,
    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE         = 708,
    CUDA_ERROR_CONTEXT_IS_DESTROYED           = 709,
    CUDA_ERROR_ASSERT                         = 710,
    CUDA_ERROR_TOO_MANY_PEERS                 = 711,
    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,
    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED     = 713,
    CUDA_ERROR_HARDWARE_STACK_ERROR           = 714,
    CUDA_ERROR_ILLEGAL_INSTRUCTION            = 715,
    CUDA_ERROR_MISALIGNED_ADDRESS             = 716,
    CUDA_ERROR_INVALID_ADDRESS_SPACE          = 717,
    CUDA_ERROR_INVALID_PC                     = 718,
    CUDA_ERROR_LAUNCH_FAILED                  = 719,
    CUDA_ERROR_NOT_PERMITTED                  = 800,
    CUDA_ERROR_NOT_SUPPORTED                  = 801,
    CUDA_ERROR_UNKNOWN                        = 999
}

extern(System) nothrow
{
    alias CUstreamCallback = void function(CUstream hStream, CUresult status, void *userData);
    alias CUoccupancyB2DSize = size_t function(int blockSize);
}

enum CU_MEMHOSTALLOC_PORTABLE        = 0x01;
enum CU_MEMHOSTALLOC_DEVICEMAP       = 0x02;
enum CU_MEMHOSTALLOC_WRITECOMBINED   = 0x04;
enum CU_MEMHOSTREGISTER_PORTABLE     = 0x01;
enum CU_MEMHOSTREGISTER_DEVICEMAP    = 0x02;

struct CUDA_MEMCPY2D
{
    size_t srcXInBytes;
    size_t srcY;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    size_t srcPitch;
    size_t dstXInBytes;
    size_t dstY;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    size_t dstPitch;
    size_t WidthInBytes;
    size_t Height;
}

struct CUDA_MEMCPY3D
{
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    void *reserved0;
    size_t srcPitch;
    size_t srcHeight;
    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    void *reserved1;
    size_t dstPitch;
    size_t dstHeight;
    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
}

struct CUDA_MEMCPY3D_PEER
{
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    CUcontext srcContext;
    size_t srcPitch;
    size_t srcHeight;
    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    CUcontext dstContext;
    size_t dstPitch;
    size_t dstHeight;
    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
}

struct CUDA_ARRAY_DESCRIPTOR
{
    size_t Width;
    size_t Height;
    CUarray_format Format;
    uint NumChannels;
}

struct CUDA_ARRAY3D_DESCRIPTOR
{
    size_t Width;
    size_t Height;
    size_t Depth;

    CUarray_format Format;
    uint NumChannels;
    uint Flags;
}

struct CUDA_RESOURCE_DESC
{
    CUresourcetype resType;

    union res_st {
        struct array_st
        {
            CUarray hArray;
        }
        array_st array;

        struct mipmap_st
        {
            CUmipmappedArray hMipmappedArray;
        }
        mipmap_st mipmap;

        struct linear_st
        {
            CUdeviceptr devPtr;
            CUarray_format format;
            uint numChannels;
            size_t sizeInBytes;
        }
        linear_st linear;

        struct pitch2D_st
        {
            CUdeviceptr devPtr;
            CUarray_format format;
            uint numChannels;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        }
        pitch2D_st pitch2D;

        struct reserved_st
        {
            int[32] reserved;
        }
        reserved_st reserved;
    }

    res_st res;
    uint flags;
}

struct CUDA_TEXTURE_DESC
{
    CUaddress_mode[3] addressMode;
    CUfilter_mode filterMode;
    uint flags;
    uint maxAnisotropy;
    CUfilter_mode mipmapFilterMode;
    float mipmapLevelBias;
    float minMipmapLevelClamp;
    float maxMipmapLevelClamp;
    int[16] reserved;
}

alias CUresourceViewFormat = int;
enum : CUresourceViewFormat
{
    CU_RES_VIEW_FORMAT_NONE          = 0x00,
    CU_RES_VIEW_FORMAT_UINT_1X8      = 0x01,
    CU_RES_VIEW_FORMAT_UINT_2X8      = 0x02,
    CU_RES_VIEW_FORMAT_UINT_4X8      = 0x03,
    CU_RES_VIEW_FORMAT_SINT_1X8      = 0x04,
    CU_RES_VIEW_FORMAT_SINT_2X8      = 0x05,
    CU_RES_VIEW_FORMAT_SINT_4X8      = 0x06,
    CU_RES_VIEW_FORMAT_UINT_1X16     = 0x07,
    CU_RES_VIEW_FORMAT_UINT_2X16     = 0x08,
    CU_RES_VIEW_FORMAT_UINT_4X16     = 0x09,
    CU_RES_VIEW_FORMAT_SINT_1X16     = 0x0a,
    CU_RES_VIEW_FORMAT_SINT_2X16     = 0x0b,
    CU_RES_VIEW_FORMAT_SINT_4X16     = 0x0c,
    CU_RES_VIEW_FORMAT_UINT_1X32     = 0x0d,
    CU_RES_VIEW_FORMAT_UINT_2X32     = 0x0e,
    CU_RES_VIEW_FORMAT_UINT_4X32     = 0x0f,
    CU_RES_VIEW_FORMAT_SINT_1X32     = 0x10,
    CU_RES_VIEW_FORMAT_SINT_2X32     = 0x11,
    CU_RES_VIEW_FORMAT_SINT_4X32     = 0x12,
    CU_RES_VIEW_FORMAT_FLOAT_1X16    = 0x13,
    CU_RES_VIEW_FORMAT_FLOAT_2X16    = 0x14,
    CU_RES_VIEW_FORMAT_FLOAT_4X16    = 0x15,
    CU_RES_VIEW_FORMAT_FLOAT_1X32    = 0x16,
    CU_RES_VIEW_FORMAT_FLOAT_2X32    = 0x17,
    CU_RES_VIEW_FORMAT_FLOAT_4X32    = 0x18,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1  = 0x19,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2  = 0x1a,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3  = 0x1b,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4  = 0x1c,
    CU_RES_VIEW_FORMAT_SIGNED_BC4    = 0x1d,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5  = 0x1e,
    CU_RES_VIEW_FORMAT_SIGNED_BC5    = 0x1f,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20,
    CU_RES_VIEW_FORMAT_SIGNED_BC6H   = 0x21,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7  = 0x22
}

struct CUDA_RESOURCE_VIEW_DESC
{
    CUresourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    uint firstMipmapLevel;
    uint lastMipmapLevel;
    uint firstLayer;
    uint lastLayer;
    uint[16] reserved;
}


struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS
{
    ulong p2pToken;
    uint vaSpaceToken;
}

enum CUDA_ARRAY3D_LAYERED        = 0x01;
enum CUDA_ARRAY3D_SURFACE_LDST   = 0x02;
enum CUDA_ARRAY3D_CUBEMAP        = 0x04;
enum CUDA_ARRAY3D_TEXTURE_GATHER = 0x08;
enum CUDA_ARRAY3D_DEPTH_TEXTURE = 0x10;
enum CU_TRSA_OVERRIDE_FORMAT = 0x01;
enum CU_TRSF_READ_AS_INTEGER         = 0x01;
enum CU_TRSF_NORMALIZED_COORDINATES  = 0x02;
enum CU_TRSF_SRGB  = 0x10;
enum CU_LAUNCH_PARAM_END            = (cast(void*)0x00);
enum CU_LAUNCH_PARAM_BUFFER_POINTER = (cast(void*)0x01);
enum CU_LAUNCH_PARAM_BUFFER_SIZE    = (cast(void*)0x02);
enum CU_PARAM_TR_DEFAULT = -1;


extern(System) @nogc nothrow
{
    alias da_cuGetErrorString = CUresult function(CUresult error, const(char) **pStr);
    alias da_cuGetErrorName = CUresult function(CUresult error, const(char) **pStr);
    alias da_cuInit = CUresult function(uint Flags);
    alias da_cuDriverGetVersion = CUresult function(int *driverVersion);
    alias da_cuDeviceGet = CUresult function(CUdevice *device, int ordinal);
    alias da_cuDeviceGetCount = CUresult function(int *count);
    alias da_cuDeviceGetName = CUresult function(char *name, int len, CUdevice dev);
    alias da_cuDeviceTotalMem = CUresult function(size_t *bytes, CUdevice dev);
    alias da_cuDeviceGetAttribute = CUresult function(int *pi, CUdevice_attribute attrib, CUdevice dev);
    alias da_cuCtxCreate = CUresult function(CUcontext *pctx, uint flags, CUdevice dev);
    alias da_cuCtxDestroy = CUresult function(CUcontext ctx);
    alias da_cuCtxPushCurrent = CUresult function(CUcontext ctx);
    alias da_cuCtxPopCurrent = CUresult function(CUcontext *pctx);
    alias da_cuCtxSetCurrent = CUresult function(CUcontext ctx);
    alias da_cuCtxGetCurrent = CUresult function(CUcontext *pctx);
    alias da_cuCtxGetDevice = CUresult function(CUdevice *device);
    alias da_cuCtxSynchronize = CUresult function();
    alias da_cuCtxSetLimit = CUresult function(CUlimit limit, size_t value);
    alias da_cuCtxGetLimit = CUresult function(size_t *pvalue, CUlimit limit);
    alias da_cuCtxGetCacheConfig = CUresult function(CUfunc_cache *pconfig);
    alias da_cuCtxSetCacheConfig = CUresult function(CUfunc_cache config);
    alias da_cuCtxGetSharedMemConfig = CUresult function(CUsharedconfig *pConfig);
    alias da_cuCtxSetSharedMemConfig = CUresult function(CUsharedconfig config);
    alias da_cuCtxGetApiVersion = CUresult function(CUcontext ctx, uint *version_);
    alias da_cuCtxGetStreamPriorityRange = CUresult function(int *leastPriority, int *greatestPriority);
    alias da_cuCtxDetach = CUresult function(CUcontext ctx);
    alias da_cuModuleLoad = CUresult function(CUmodule *module_, const(char) *fname);
    alias da_cuModuleLoadData = CUresult function(CUmodule *module_, const(void)* image);
    alias da_cuModuleLoadDataEx = CUresult function(CUmodule *module_, const(void)* image, uint numOptions, CUjit_option *options, void **optionValues);
    alias da_cuModuleLoadFatBinary = CUresult function(CUmodule *module_, const(void)* fatCubin);
    alias da_cuModuleUnload = CUresult function(CUmodule hmod);
    alias da_cuModuleGetFunction = CUresult function(CUfunction *hfunc, CUmodule hmod, const(char) *name);
    alias da_cuModuleGetGlobal = CUresult function(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const(char) *name);
    alias da_cuModuleGetTexRef = CUresult function(CUtexref *pTexRef, CUmodule hmod, const(char) *name);
    alias da_cuModuleGetSurfRef = CUresult function(CUsurfref *pSurfRef, CUmodule hmod, const(char) *name);
    alias da_cuLinkCreate = CUresult function(uint numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);
    alias da_cuLinkAddData = CUresult function(CUlinkState state, CUjitInputType type, void *data, size_t size, const(char) *name, uint numOptions, CUjit_option *options, void **optionValues);
    alias da_cuLinkAddFile = CUresult function(CUlinkState state, CUjitInputType type, const(char) *path, uint numOptions, CUjit_option *options, void **optionValues);
    alias da_cuLinkComplete = CUresult function(CUlinkState state, void **cubinOut, size_t *sizeOut);
    alias da_cuLinkDestroy = CUresult function(CUlinkState state);
    alias da_cuMemGetInfo = CUresult function(size_t *free, size_t *total);
    alias da_cuMemAlloc = CUresult function(CUdeviceptr *dptr, size_t bytesize);
    alias da_cuMemAllocPitch = CUresult function(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, uint ElementSizeBytes);
    alias da_cuMemFree = CUresult function(CUdeviceptr dptr);
    alias da_cuMemGetAddressRange = CUresult function(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);
    alias da_cuMemAllocHost = CUresult function(void **pp, size_t bytesize);
    alias da_cuMemFreeHost = CUresult function(void *p);
    alias da_cuMemHostAlloc = CUresult function(void **pp, size_t bytesize, uint Flags);
    alias da_cuMemHostGetDevicePointer = CUresult function(CUdeviceptr *pdptr, void *p, uint Flags);
    alias da_cuMemHostGetFlags = CUresult function(uint *pFlags, void *p);
    alias da_cuMemAllocManaged = CUresult function(CUdeviceptr *dptr, size_t bytesize, uint flags);
    alias da_cuDeviceGetByPCIBusId = CUresult function(CUdevice *dev, const(char) *pciBusId);
    alias da_cuDeviceGetPCIBusId = CUresult function(char *pciBusId, int len, CUdevice dev);
    alias da_cuIpcGetEventHandle = CUresult function(CUipcEventHandle *pHandle, CUevent event);
    alias da_cuIpcOpenEventHandle = CUresult function(CUevent *phEvent, CUipcEventHandle handle);
    alias da_cuIpcGetMemHandle = CUresult function(CUipcMemHandle *pHandle, CUdeviceptr dptr);
    alias da_cuIpcOpenMemHandle = CUresult function(CUdeviceptr *pdptr, CUipcMemHandle handle, uint Flags);
    alias da_cuIpcCloseMemHandle = CUresult function(CUdeviceptr dptr);
    alias da_cuMemHostRegister = CUresult function(void *p, size_t bytesize, uint Flags);
    alias da_cuMemHostUnregister = CUresult function(void *p);
    alias da_cuMemcpy = CUresult function(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
    alias da_cuMemcpyPeer = CUresult function(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
    alias da_cuMemcpyHtoD = CUresult function(CUdeviceptr dstDevice, const(void)* srcHost, size_t ByteCount);
    alias da_cuMemcpyDtoH = CUresult function(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
    alias da_cuMemcpyDtoD = CUresult function(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
    alias da_cuMemcpyDtoA = CUresult function(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
    alias da_cuMemcpyAtoD = CUresult function(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
    alias da_cuMemcpyHtoA = CUresult function(CUarray dstArray, size_t dstOffset, const(void)* srcHost, size_t ByteCount);
    alias da_cuMemcpyAtoH = CUresult function(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
    alias da_cuMemcpyAtoA = CUresult function(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
    alias da_cuMemcpy2D = CUresult function(const CUDA_MEMCPY2D *pCopy);
    alias da_cuMemcpy2DUnaligned = CUresult function(const CUDA_MEMCPY2D *pCopy);
    alias da_cuMemcpy3D = CUresult function(const CUDA_MEMCPY3D *pCopy);
    alias da_cuMemcpy3DPeer = CUresult function(const CUDA_MEMCPY3D_PEER *pCopy);
    alias da_cuMemcpyAsync = CUresult function(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyPeerAsync = CUresult function(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyHtoDAsync = CUresult function(CUdeviceptr dstDevice, const(void)* srcHost, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyDtoHAsync = CUresult function(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyDtoDAsync = CUresult function(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyHtoAAsync = CUresult function(CUarray dstArray, size_t dstOffset, const(void)* srcHost, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpyAtoHAsync = CUresult function(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
    alias da_cuMemcpy2DAsync = CUresult function(const CUDA_MEMCPY2D *pCopy, CUstream hStream);
    alias da_cuMemcpy3DAsync = CUresult function(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
    alias da_cuMemcpy3DPeerAsync = CUresult function(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
    alias da_cuMemsetD8 = CUresult function(CUdeviceptr dstDevice, ubyte uc, size_t N);
    alias da_cuMemsetD16 = CUresult function(CUdeviceptr dstDevice, ushort us, size_t N);
    alias da_cuMemsetD32 = CUresult function(CUdeviceptr dstDevice, uint ui, size_t N);
    alias da_cuMemsetD2D8 = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, ubyte uc, size_t Width, size_t Height);
    alias da_cuMemsetD2D16 = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, ushort us, size_t Width, size_t Height);
    alias da_cuMemsetD2D32 = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, uint ui, size_t Width, size_t Height);
    alias da_cuMemsetD8Async = CUresult function(CUdeviceptr dstDevice, ubyte uc, size_t N, CUstream hStream);
    alias da_cuMemsetD16Async = CUresult function(CUdeviceptr dstDevice, ushort us, size_t N, CUstream hStream);
    alias da_cuMemsetD32Async = CUresult function(CUdeviceptr dstDevice, uint ui, size_t N, CUstream hStream);
    alias da_cuMemsetD2D8Async = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, ubyte uc, size_t Width, size_t Height, CUstream hStream);
    alias da_cuMemsetD2D16Async = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, ushort us, size_t Width, size_t Height, CUstream hStream);
    alias da_cuMemsetD2D32Async = CUresult function(CUdeviceptr dstDevice, size_t dstPitch, uint ui, size_t Width, size_t Height, CUstream hStream);
    alias da_cuArrayCreate = CUresult function(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
    alias da_cuArrayGetDescriptor = CUresult function(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
    alias da_cuArrayDestroy = CUresult function(CUarray hArray);
    alias da_cuArray3DCreate = CUresult function(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);
    alias da_cuArray3DGetDescriptor = CUresult function(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
    alias da_cuMipmappedArrayCreate = CUresult function(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, uint numMipmapLevels);
    alias da_cuMipmappedArrayGetLevel = CUresult function(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, uint level);
    alias da_cuMipmappedArrayDestroy = CUresult function(CUmipmappedArray hMipmappedArray);
    alias da_cuPointerGetAttribute = CUresult function(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
    alias da_cuPointerSetAttribute = CUresult function(const(void)* value, CUpointer_attribute attribute, CUdeviceptr ptr);
    alias da_cuStreamCreate = CUresult function(CUstream *phStream, uint Flags);
    alias da_cuStreamCreateWithPriority = CUresult function(CUstream *phStream, uint flags, int priority);
    alias da_cuStreamGetPriority = CUresult function(CUstream hStream, int *priority);
    alias da_cuStreamGetFlags = CUresult function(CUstream hStream, uint *flags);
    alias da_cuStreamWaitEvent = CUresult function(CUstream hStream, CUevent hEvent, uint Flags);
    alias da_cuStreamAddCallback = CUresult function(CUstream hStream, CUstreamCallback callback, void *userData, uint flags);
    alias da_cuStreamAttachMemAsync = CUresult function(CUstream hStream, CUdeviceptr dptr, size_t length, uint flags);
    alias da_cuStreamQuery = CUresult function(CUstream hStream);
    alias da_cuStreamSynchronize = CUresult function(CUstream hStream);
    alias da_cuStreamDestroy = CUresult function(CUstream hStream);
    alias da_cuEventCreate = CUresult function(CUevent *phEvent, uint Flags);
    alias da_cuEventRecord = CUresult function(CUevent hEvent, CUstream hStream);
    alias da_cuEventQuery = CUresult function(CUevent hEvent);
    alias da_cuEventSynchronize = CUresult function(CUevent hEvent);
    alias da_cuEventDestroy = CUresult function(CUevent hEvent);
    alias da_cuEventElapsedTime = CUresult function(float *pMilliseconds, CUevent hStart, CUevent hEnd);
    alias da_cuFuncGetAttribute = CUresult function(int *pi, CUfunction_attribute attrib, CUfunction hfunc);
    alias da_cuFuncSetCacheConfig = CUresult function(CUfunction hfunc, CUfunc_cache config);
    alias da_cuFuncSetSharedMemConfig = CUresult function(CUfunction hfunc, CUsharedconfig config);
    alias da_cuLaunchKernel = CUresult function(CUfunction f, uint gridDimX, uint gridDimY, uint gridDimZ, uint blockDimX, uint blockDimY, uint blockDimZ, uint sharedMemBytes, CUstream hStream, void **kernelParams, void **extra);
    alias da_cuOccupancyMaxActiveBlocksPerMultiprocessor = CUresult function(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
    alias da_cuOccupancyMaxPotentialBlockSize = CUresult function(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
    alias da_cuTexRefSetArray = CUresult function(CUtexref hTexRef, CUarray hArray, uint Flags);
    alias da_cuTexRefSetMipmappedArray = CUresult function(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, uint Flags);
    alias da_cuTexRefSetAddress = CUresult function(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
    alias da_cuTexRefSetAddress2D = CUresult function(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
    alias da_cuTexRefSetFormat = CUresult function(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
    alias da_cuTexRefSetAddressMode = CUresult function(CUtexref hTexRef, int dim, CUaddress_mode am);
    alias da_cuTexRefSetFilterMode = CUresult function(CUtexref hTexRef, CUfilter_mode fm);
    alias da_cuTexRefSetMipmapFilterMode = CUresult function(CUtexref hTexRef, CUfilter_mode fm);
    alias da_cuTexRefSetMipmapLevelBias = CUresult function(CUtexref hTexRef, float bias);
    alias da_cuTexRefSetMipmapLevelClamp = CUresult function(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
    alias da_cuTexRefSetMaxAnisotropy = CUresult function(CUtexref hTexRef, uint maxAniso);
    alias da_cuTexRefSetFlags = CUresult function(CUtexref hTexRef, uint Flags);
    alias da_cuTexRefGetAddress = CUresult function(CUdeviceptr *pdptr, CUtexref hTexRef);
    alias da_cuTexRefGetArray = CUresult function(CUarray *phArray, CUtexref hTexRef);
    alias da_cuTexRefGetMipmappedArray = CUresult function(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);
    alias da_cuTexRefGetAddressMode = CUresult function(CUaddress_mode *pam, CUtexref hTexRef, int dim);
    alias da_cuTexRefGetFilterMode = CUresult function(CUfilter_mode *pfm, CUtexref hTexRef);
    alias da_cuTexRefGetFormat = CUresult function(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);
    alias da_cuTexRefGetMipmapFilterMode = CUresult function(CUfilter_mode *pfm, CUtexref hTexRef);
    alias da_cuTexRefGetMipmapLevelBias = CUresult function(float *pbias, CUtexref hTexRef);
    alias da_cuTexRefGetMipmapLevelClamp = CUresult function(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);
    alias da_cuTexRefGetMaxAnisotropy = CUresult function(int *pmaxAniso, CUtexref hTexRef);
    alias da_cuTexRefGetFlags = CUresult function(uint *pFlags, CUtexref hTexRef);
    alias da_cuSurfRefSetArray = CUresult function(CUsurfref hSurfRef, CUarray hArray, uint Flags);
    alias da_cuSurfRefGetArray = CUresult function(CUarray *phArray, CUsurfref hSurfRef);
    alias da_cuTexObjectCreate = CUresult function(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);
    alias da_cuTexObjectDestroy = CUresult function(CUtexObject texObject);
    alias da_cuTexObjectGetResourceDesc = CUresult function(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);
    alias da_cuTexObjectGetTextureDesc = CUresult function(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);
    alias da_cuTexObjectGetResourceViewDesc = CUresult function(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);
    alias da_cuSurfObjectCreate = CUresult function(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);
    alias da_cuSurfObjectDestroy = CUresult function(CUsurfObject surfObject);
    alias da_cuSurfObjectGetResourceDesc = CUresult function(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);
    alias da_cuDeviceCanAccessPeer = CUresult function(int *canAccessPeer, CUdevice dev, CUdevice peerDev);
    alias da_cuCtxEnablePeerAccess = CUresult function(CUcontext peerContext, uint Flags);
    alias da_cuCtxDisablePeerAccess = CUresult function(CUcontext peerContext);
    alias da_cuGraphicsUnregisterResource = CUresult function(CUgraphicsResource resource);
    alias da_cuGraphicsSubResourceGetMappedArray = CUresult function(CUarray *pArray, CUgraphicsResource resource, uint arrayIndex, uint mipLevel);
    alias da_cuGraphicsResourceGetMappedMipmappedArray = CUresult function(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);
    alias da_cuGraphicsResourceGetMappedPointer = CUresult function(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
    alias da_cuGraphicsResourceSetMapFlags = CUresult function(CUgraphicsResource resource, uint flags);
    alias da_cuGraphicsMapResources = CUresult function(uint count, CUgraphicsResource *resources, CUstream hStream);
    alias da_cuGraphicsUnmapResources = CUresult function(uint count, CUgraphicsResource *resources, CUstream hStream);
    alias da_cuGetExportTable = CUresult function(const(void)* *ppExportTable, const CUuuid *pExportTableId);
}

__gshared
{
    da_cuGetErrorString cuGetErrorString;
    da_cuGetErrorName cuGetErrorName;
    da_cuInit cuInit;
    da_cuDriverGetVersion cuDriverGetVersion;
    da_cuDeviceGet cuDeviceGet;
    da_cuDeviceGetCount cuDeviceGetCount;
    da_cuDeviceGetName cuDeviceGetName;
    da_cuDeviceTotalMem cuDeviceTotalMem;
    da_cuDeviceGetAttribute cuDeviceGetAttribute;
    da_cuCtxCreate cuCtxCreate;
    da_cuCtxDestroy cuCtxDestroy;
    da_cuCtxPushCurrent cuCtxPushCurrent;
    da_cuCtxPopCurrent cuCtxPopCurrent;
    da_cuCtxSetCurrent cuCtxSetCurrent;
    da_cuCtxGetCurrent cuCtxGetCurrent;
    da_cuCtxGetDevice cuCtxGetDevice;
    da_cuCtxSynchronize cuCtxSynchronize;
    da_cuCtxSetLimit cuCtxSetLimit;
    da_cuCtxGetLimit cuCtxGetLimit;
    da_cuCtxGetCacheConfig cuCtxGetCacheConfig;
    da_cuCtxSetCacheConfig cuCtxSetCacheConfig;
    da_cuCtxGetSharedMemConfig cuCtxGetSharedMemConfig;
    da_cuCtxSetSharedMemConfig cuCtxSetSharedMemConfig;
    da_cuCtxGetApiVersion cuCtxGetApiVersion;
    da_cuCtxGetStreamPriorityRange cuCtxGetStreamPriorityRange;
    da_cuCtxDetach cuCtxDetach;
    da_cuModuleLoad cuModuleLoad;
    da_cuModuleLoadData cuModuleLoadData;
    da_cuModuleLoadDataEx cuModuleLoadDataEx;
    da_cuModuleLoadFatBinary cuModuleLoadFatBinary;
    da_cuModuleUnload cuModuleUnload;
    da_cuModuleGetFunction cuModuleGetFunction;
    da_cuModuleGetGlobal cuModuleGetGlobal;
    da_cuModuleGetTexRef cuModuleGetTexRef;
    da_cuModuleGetSurfRef cuModuleGetSurfRef;
    da_cuLinkCreate cuLinkCreate;
    da_cuLinkAddData cuLinkAddData;
    da_cuLinkAddFile cuLinkAddFile;
    da_cuLinkComplete cuLinkComplete;
    da_cuLinkDestroy cuLinkDestroy;
    da_cuMemGetInfo cuMemGetInfo;
    da_cuMemAlloc cuMemAlloc;
    da_cuMemAllocPitch cuMemAllocPitch;
    da_cuMemFree cuMemFree;
    da_cuMemGetAddressRange cuMemGetAddressRange;
    da_cuMemAllocHost cuMemAllocHost;
    da_cuMemFreeHost cuMemFreeHost;
    da_cuMemHostAlloc cuMemHostAlloc;
    da_cuMemHostGetDevicePointer cuMemHostGetDevicePointer;
    da_cuMemHostGetFlags cuMemHostGetFlags;
    da_cuMemAllocManaged cuMemAllocManaged;
    da_cuDeviceGetByPCIBusId cuDeviceGetByPCIBusId;
    da_cuDeviceGetPCIBusId cuDeviceGetPCIBusId;
    da_cuIpcGetEventHandle cuIpcGetEventHandle;
    da_cuIpcOpenEventHandle cuIpcOpenEventHandle;
    da_cuIpcGetMemHandle cuIpcGetMemHandle;
    da_cuIpcOpenMemHandle cuIpcOpenMemHandle;
    da_cuIpcCloseMemHandle cuIpcCloseMemHandle;
    da_cuMemHostRegister cuMemHostRegister;
    da_cuMemHostUnregister cuMemHostUnregister;
    da_cuMemcpy cuMemcpy;
    da_cuMemcpyPeer cuMemcpyPeer;
    da_cuMemcpyHtoD cuMemcpyHtoD;
    da_cuMemcpyDtoH cuMemcpyDtoH;
    da_cuMemcpyDtoD cuMemcpyDtoD;
    da_cuMemcpyDtoA cuMemcpyDtoA;
    da_cuMemcpyAtoD cuMemcpyAtoD;
    da_cuMemcpyHtoA cuMemcpyHtoA;
    da_cuMemcpyAtoH cuMemcpyAtoH;
    da_cuMemcpyAtoA cuMemcpyAtoA;
    da_cuMemcpy2D cuMemcpy2D;
    da_cuMemcpy2DUnaligned cuMemcpy2DUnaligned;
    da_cuMemcpy3D cuMemcpy3D;
    da_cuMemcpy3DPeer cuMemcpy3DPeer;
    da_cuMemcpyAsync cuMemcpyAsync;
    da_cuMemcpyPeerAsync cuMemcpyPeerAsync;
    da_cuMemcpyHtoDAsync cuMemcpyHtoDAsync;
    da_cuMemcpyDtoHAsync cuMemcpyDtoHAsync;
    da_cuMemcpyDtoDAsync cuMemcpyDtoDAsync;
    da_cuMemcpyHtoAAsync cuMemcpyHtoAAsync;
    da_cuMemcpyAtoHAsync cuMemcpyAtoHAsync;
    da_cuMemcpy2DAsync cuMemcpy2DAsync;
    da_cuMemcpy3DAsync cuMemcpy3DAsync;
    da_cuMemcpy3DPeerAsync cuMemcpy3DPeerAsync;
    da_cuMemsetD8 cuMemsetD8;
    da_cuMemsetD16 cuMemsetD16;
    da_cuMemsetD32 cuMemsetD32;
    da_cuMemsetD2D8 cuMemsetD2D8;
    da_cuMemsetD2D16 cuMemsetD2D16;
    da_cuMemsetD2D32 cuMemsetD2D32;
    da_cuMemsetD8Async cuMemsetD8Async;
    da_cuMemsetD16Async cuMemsetD16Async;
    da_cuMemsetD32Async cuMemsetD32Async;
    da_cuMemsetD2D8Async cuMemsetD2D8Async;
    da_cuMemsetD2D16Async cuMemsetD2D16Async;
    da_cuMemsetD2D32Async cuMemsetD2D32Async;
    da_cuArrayCreate cuArrayCreate;
    da_cuArrayGetDescriptor cuArrayGetDescriptor;
    da_cuArrayDestroy cuArrayDestroy;
    da_cuArray3DCreate cuArray3DCreate;
    da_cuArray3DGetDescriptor cuArray3DGetDescriptor;
    da_cuMipmappedArrayCreate cuMipmappedArrayCreate;
    da_cuMipmappedArrayGetLevel cuMipmappedArrayGetLevel;
    da_cuMipmappedArrayDestroy cuMipmappedArrayDestroy;
    da_cuPointerGetAttribute cuPointerGetAttribute;
    da_cuPointerSetAttribute cuPointerSetAttribute;
    da_cuStreamCreate cuStreamCreate;
    da_cuStreamCreateWithPriority cuStreamCreateWithPriority;
    da_cuStreamGetPriority cuStreamGetPriority;
    da_cuStreamGetFlags cuStreamGetFlags;
    da_cuStreamWaitEvent cuStreamWaitEvent;
    da_cuStreamAddCallback cuStreamAddCallback;
    da_cuStreamAttachMemAsync cuStreamAttachMemAsync;
    da_cuStreamQuery cuStreamQuery;
    da_cuStreamSynchronize cuStreamSynchronize;
    da_cuStreamDestroy cuStreamDestroy;
    da_cuEventCreate cuEventCreate;
    da_cuEventRecord cuEventRecord;
    da_cuEventQuery cuEventQuery;
    da_cuEventSynchronize cuEventSynchronize;
    da_cuEventDestroy cuEventDestroy;
    da_cuEventElapsedTime cuEventElapsedTime;
    da_cuFuncGetAttribute cuFuncGetAttribute;
    da_cuFuncSetCacheConfig cuFuncSetCacheConfig;
    da_cuFuncSetSharedMemConfig cuFuncSetSharedMemConfig;
    da_cuLaunchKernel cuLaunchKernel;
    da_cuOccupancyMaxActiveBlocksPerMultiprocessor cuOccupancyMaxActiveBlocksPerMultiprocessor;
    da_cuOccupancyMaxPotentialBlockSize cuOccupancyMaxPotentialBlockSize;
    da_cuTexRefSetArray cuTexRefSetArray;
    da_cuTexRefSetMipmappedArray cuTexRefSetMipmappedArray;
    da_cuTexRefSetAddress cuTexRefSetAddress;
    da_cuTexRefSetAddress2D cuTexRefSetAddress2D;
    da_cuTexRefSetFormat cuTexRefSetFormat;
    da_cuTexRefSetAddressMode cuTexRefSetAddressMode;
    da_cuTexRefSetFilterMode cuTexRefSetFilterMode;
    da_cuTexRefSetMipmapFilterMode cuTexRefSetMipmapFilterMode;
    da_cuTexRefSetMipmapLevelBias cuTexRefSetMipmapLevelBias;
    da_cuTexRefSetMipmapLevelClamp cuTexRefSetMipmapLevelClamp;
    da_cuTexRefSetMaxAnisotropy cuTexRefSetMaxAnisotropy;
    da_cuTexRefSetFlags cuTexRefSetFlags;
    da_cuTexRefGetAddress cuTexRefGetAddress;
    da_cuTexRefGetArray cuTexRefGetArray;
    da_cuTexRefGetMipmappedArray cuTexRefGetMipmappedArray;
    da_cuTexRefGetAddressMode cuTexRefGetAddressMode;
    da_cuTexRefGetFilterMode cuTexRefGetFilterMode;
    da_cuTexRefGetFormat cuTexRefGetFormat;
    da_cuTexRefGetMipmapFilterMode cuTexRefGetMipmapFilterMode;
    da_cuTexRefGetMipmapLevelBias cuTexRefGetMipmapLevelBias;
    da_cuTexRefGetMipmapLevelClamp cuTexRefGetMipmapLevelClamp;
    da_cuTexRefGetMaxAnisotropy cuTexRefGetMaxAnisotropy;
    da_cuTexRefGetFlags cuTexRefGetFlags;
    da_cuSurfRefSetArray cuSurfRefSetArray;
    da_cuSurfRefGetArray cuSurfRefGetArray;
    da_cuTexObjectCreate cuTexObjectCreate;
    da_cuTexObjectDestroy cuTexObjectDestroy;
    da_cuTexObjectGetResourceDesc cuTexObjectGetResourceDesc;
    da_cuTexObjectGetTextureDesc cuTexObjectGetTextureDesc;
    da_cuTexObjectGetResourceViewDesc cuTexObjectGetResourceViewDesc;
    da_cuSurfObjectCreate cuSurfObjectCreate;
    da_cuSurfObjectDestroy cuSurfObjectDestroy;
    da_cuSurfObjectGetResourceDesc cuSurfObjectGetResourceDesc;
    da_cuDeviceCanAccessPeer cuDeviceCanAccessPeer;
    da_cuCtxEnablePeerAccess cuCtxEnablePeerAccess;
    da_cuCtxDisablePeerAccess cuCtxDisablePeerAccess;
    da_cuGraphicsUnregisterResource cuGraphicsUnregisterResource;
    da_cuGraphicsSubResourceGetMappedArray cuGraphicsSubResourceGetMappedArray;
    da_cuGraphicsResourceGetMappedMipmappedArray cuGraphicsResourceGetMappedMipmappedArray;
    da_cuGraphicsResourceGetMappedPointer cuGraphicsResourceGetMappedPointer;
    da_cuGraphicsResourceSetMapFlags cuGraphicsResourceSetMapFlags;
    da_cuGraphicsMapResources cuGraphicsMapResources;
    da_cuGraphicsUnmapResources cuGraphicsUnmapResources;
    da_cuGetExportTable cuGetExportTable;
}


// Driver API loader
class DerelictCUDADriverLoader : SharedLibLoader
{
    protected
    {
        override void loadSymbols()
        {
            // Note: new versions of API are to be loaded (_v2 or _v3 suffices)
            // DerelictCUDA only represents the newest API and load the latest version of functions
            // Previous versions of APIs, if necessary, can be done with previous versions of DerelictCUDA.

            bindFunc(cast(void**)&cuGetErrorString, "cuGetErrorString");
            bindFunc(cast(void**)&cuGetErrorName, "cuGetErrorName");
            bindFunc(cast(void**)&cuInit, "cuInit");
            bindFunc(cast(void**)&cuDriverGetVersion, "cuDriverGetVersion");
            bindFunc(cast(void**)&cuDeviceGet, "cuDeviceGet");
            bindFunc(cast(void**)&cuDeviceGetCount, "cuDeviceGetCount");
            bindFunc(cast(void**)&cuDeviceGetName, "cuDeviceGetName");
            bindFunc(cast(void**)&cuDeviceTotalMem, "cuDeviceTotalMem_v2");
            bindFunc(cast(void**)&cuDeviceGetAttribute, "cuDeviceGetAttribute");
            bindFunc(cast(void**)&cuCtxCreate, "cuCtxCreate_v2");
            bindFunc(cast(void**)&cuCtxDestroy, "cuCtxDestroy_v2");
            bindFunc(cast(void**)&cuCtxPushCurrent, "cuCtxPushCurrent_v2");
            bindFunc(cast(void**)&cuCtxPopCurrent, "cuCtxPopCurrent_v2");
            bindFunc(cast(void**)&cuCtxSetCurrent, "cuCtxSetCurrent");
            bindFunc(cast(void**)&cuCtxGetCurrent, "cuCtxGetCurrent");
            bindFunc(cast(void**)&cuCtxGetDevice, "cuCtxGetDevice");
            bindFunc(cast(void**)&cuCtxSynchronize, "cuCtxSynchronize");
            bindFunc(cast(void**)&cuCtxSetLimit, "cuCtxSetLimit");
            bindFunc(cast(void**)&cuCtxGetLimit, "cuCtxGetLimit");
            bindFunc(cast(void**)&cuCtxGetCacheConfig, "cuCtxGetCacheConfig");
            bindFunc(cast(void**)&cuCtxSetCacheConfig, "cuCtxSetCacheConfig");
            bindFunc(cast(void**)&cuCtxGetSharedMemConfig, "cuCtxGetSharedMemConfig");
            bindFunc(cast(void**)&cuCtxSetSharedMemConfig, "cuCtxSetSharedMemConfig");
            bindFunc(cast(void**)&cuCtxGetApiVersion, "cuCtxGetApiVersion");
            bindFunc(cast(void**)&cuCtxGetStreamPriorityRange, "cuCtxGetStreamPriorityRange");
            bindFunc(cast(void**)&cuCtxDetach, "cuCtxDetach");
            bindFunc(cast(void**)&cuModuleLoad, "cuModuleLoad");
            bindFunc(cast(void**)&cuModuleLoadData, "cuModuleLoadData");
            bindFunc(cast(void**)&cuModuleLoadDataEx, "cuModuleLoadDataEx");
            bindFunc(cast(void**)&cuModuleLoadFatBinary, "cuModuleLoadFatBinary");
            bindFunc(cast(void**)&cuModuleUnload, "cuModuleUnload");
            bindFunc(cast(void**)&cuModuleGetFunction, "cuModuleGetFunction");
            bindFunc(cast(void**)&cuModuleGetGlobal, "cuModuleGetGlobal_v2");
            bindFunc(cast(void**)&cuModuleGetTexRef, "cuModuleGetTexRef");
            bindFunc(cast(void**)&cuModuleGetSurfRef, "cuModuleGetSurfRef");
            bindFunc(cast(void**)&cuLinkCreate, "cuLinkCreate_v2");
            bindFunc(cast(void**)&cuLinkAddData, "cuLinkAddData_v2");
            bindFunc(cast(void**)&cuLinkAddFile, "cuLinkAddFile_v2");
            bindFunc(cast(void**)&cuLinkComplete, "cuLinkComplete");
            bindFunc(cast(void**)&cuLinkDestroy, "cuLinkDestroy");
            bindFunc(cast(void**)&cuMemGetInfo, "cuMemGetInfo_v2");
            bindFunc(cast(void**)&cuMemAlloc, "cuMemAlloc_v2");
            bindFunc(cast(void**)&cuMemAllocPitch, "cuMemAllocPitch_v2");
            bindFunc(cast(void**)&cuMemFree, "cuMemFree_v2");
            bindFunc(cast(void**)&cuMemGetAddressRange, "cuMemGetAddressRange_v2");
            bindFunc(cast(void**)&cuMemAllocHost, "cuMemAllocHost_v2");
            bindFunc(cast(void**)&cuMemFreeHost, "cuMemFreeHost");
            bindFunc(cast(void**)&cuMemHostAlloc, "cuMemHostAlloc");
            bindFunc(cast(void**)&cuMemHostGetDevicePointer, "cuMemHostGetDevicePointer_v2");
            bindFunc(cast(void**)&cuMemHostGetFlags, "cuMemHostGetFlags");
            bindFunc(cast(void**)&cuMemAllocManaged, "cuMemAllocManaged");
            bindFunc(cast(void**)&cuDeviceGetByPCIBusId, "cuDeviceGetByPCIBusId");
            bindFunc(cast(void**)&cuDeviceGetPCIBusId, "cuDeviceGetPCIBusId");
            bindFunc(cast(void**)&cuIpcGetEventHandle, "cuIpcGetEventHandle");
            bindFunc(cast(void**)&cuIpcOpenEventHandle, "cuIpcOpenEventHandle");
            bindFunc(cast(void**)&cuIpcGetMemHandle, "cuIpcGetMemHandle");
            bindFunc(cast(void**)&cuIpcOpenMemHandle, "cuIpcOpenMemHandle");
            bindFunc(cast(void**)&cuIpcCloseMemHandle, "cuIpcCloseMemHandle");
            bindFunc(cast(void**)&cuMemHostRegister, "cuMemHostRegister_v2");
            bindFunc(cast(void**)&cuMemHostUnregister, "cuMemHostUnregister");
            bindFunc(cast(void**)&cuMemcpy, "cuMemcpy");
            bindFunc(cast(void**)&cuMemcpyPeer, "cuMemcpyPeer");
            bindFunc(cast(void**)&cuMemcpyHtoD, "cuMemcpyHtoD_v2");
            bindFunc(cast(void**)&cuMemcpyDtoH, "cuMemcpyDtoH_v2");
            bindFunc(cast(void**)&cuMemcpyDtoD, "cuMemcpyDtoD_v2");
            bindFunc(cast(void**)&cuMemcpyDtoA, "cuMemcpyDtoA_v2");
            bindFunc(cast(void**)&cuMemcpyAtoD, "cuMemcpyAtoD_v2");
            bindFunc(cast(void**)&cuMemcpyHtoA, "cuMemcpyHtoA_v2");
            bindFunc(cast(void**)&cuMemcpyAtoH, "cuMemcpyAtoH_v2");
            bindFunc(cast(void**)&cuMemcpyAtoA, "cuMemcpyAtoA_v2");
            bindFunc(cast(void**)&cuMemcpy2D, "cuMemcpy2D_v2");
            bindFunc(cast(void**)&cuMemcpy2DUnaligned, "cuMemcpy2DUnaligned_v2");
            bindFunc(cast(void**)&cuMemcpy3D, "cuMemcpy3D_v2");
            bindFunc(cast(void**)&cuMemcpy3DPeer, "cuMemcpy3DPeer");
            bindFunc(cast(void**)&cuMemcpyAsync, "cuMemcpyAsync");
            bindFunc(cast(void**)&cuMemcpyPeerAsync, "cuMemcpyPeerAsync");
            bindFunc(cast(void**)&cuMemcpyHtoDAsync, "cuMemcpyHtoDAsync_v2");
            bindFunc(cast(void**)&cuMemcpyDtoHAsync, "cuMemcpyDtoHAsync_v2");
            bindFunc(cast(void**)&cuMemcpyDtoDAsync, "cuMemcpyDtoDAsync_v2");
            bindFunc(cast(void**)&cuMemcpyHtoAAsync, "cuMemcpyHtoAAsync_v2");
            bindFunc(cast(void**)&cuMemcpyAtoHAsync, "cuMemcpyAtoHAsync_v2");
            bindFunc(cast(void**)&cuMemcpy2DAsync, "cuMemcpy2DAsync_v2");
            bindFunc(cast(void**)&cuMemcpy3DAsync, "cuMemcpy3DAsync_v2");
            bindFunc(cast(void**)&cuMemcpy3DPeerAsync, "cuMemcpy3DPeerAsync");
            bindFunc(cast(void**)&cuMemsetD8, "cuMemsetD8_v2");
            bindFunc(cast(void**)&cuMemsetD16, "cuMemsetD16_v2");
            bindFunc(cast(void**)&cuMemsetD32, "cuMemsetD32_v2");
            bindFunc(cast(void**)&cuMemsetD2D8, "cuMemsetD2D8_v2");
            bindFunc(cast(void**)&cuMemsetD2D16, "cuMemsetD2D16_v2");
            bindFunc(cast(void**)&cuMemsetD2D32, "cuMemsetD2D32_v2");
            bindFunc(cast(void**)&cuMemsetD8Async, "cuMemsetD8Async");
            bindFunc(cast(void**)&cuMemsetD16Async, "cuMemsetD16Async");
            bindFunc(cast(void**)&cuMemsetD32Async, "cuMemsetD32Async");
            bindFunc(cast(void**)&cuMemsetD2D8Async, "cuMemsetD2D8Async");
            bindFunc(cast(void**)&cuMemsetD2D16Async, "cuMemsetD2D16Async");
            bindFunc(cast(void**)&cuMemsetD2D32Async, "cuMemsetD2D32Async");
            bindFunc(cast(void**)&cuArrayCreate, "cuArrayCreate_v2");
            bindFunc(cast(void**)&cuArrayGetDescriptor, "cuArrayGetDescriptor_v2");
            bindFunc(cast(void**)&cuArrayDestroy, "cuArrayDestroy");
            bindFunc(cast(void**)&cuArray3DCreate, "cuArray3DCreate_v2");
            bindFunc(cast(void**)&cuArray3DGetDescriptor, "cuArray3DGetDescriptor_v2");
            bindFunc(cast(void**)&cuMipmappedArrayCreate, "cuMipmappedArrayCreate");
            bindFunc(cast(void**)&cuMipmappedArrayGetLevel, "cuMipmappedArrayGetLevel");
            bindFunc(cast(void**)&cuMipmappedArrayDestroy, "cuMipmappedArrayDestroy");
            bindFunc(cast(void**)&cuPointerGetAttribute, "cuPointerGetAttribute");
            bindFunc(cast(void**)&cuPointerSetAttribute, "cuPointerSetAttribute");
            bindFunc(cast(void**)&cuStreamCreate, "cuStreamCreate");
            bindFunc(cast(void**)&cuStreamCreateWithPriority, "cuStreamCreateWithPriority");
            bindFunc(cast(void**)&cuStreamGetPriority, "cuStreamGetPriority");
            bindFunc(cast(void**)&cuStreamGetFlags, "cuStreamGetFlags");
            bindFunc(cast(void**)&cuStreamWaitEvent, "cuStreamWaitEvent");
            bindFunc(cast(void**)&cuStreamAddCallback, "cuStreamAddCallback");
            bindFunc(cast(void**)&cuStreamAttachMemAsync, "cuStreamAttachMemAsync");
            bindFunc(cast(void**)&cuStreamQuery, "cuStreamQuery");
            bindFunc(cast(void**)&cuStreamSynchronize, "cuStreamSynchronize");
            bindFunc(cast(void**)&cuStreamDestroy, "cuStreamDestroy_v2");
            bindFunc(cast(void**)&cuEventCreate, "cuEventCreate");
            bindFunc(cast(void**)&cuEventRecord, "cuEventRecord");
            bindFunc(cast(void**)&cuEventQuery, "cuEventQuery");
            bindFunc(cast(void**)&cuEventSynchronize, "cuEventSynchronize");
            bindFunc(cast(void**)&cuEventDestroy, "cuEventDestroy_v2");
            bindFunc(cast(void**)&cuEventElapsedTime, "cuEventElapsedTime");
            bindFunc(cast(void**)&cuFuncGetAttribute, "cuFuncGetAttribute");
            bindFunc(cast(void**)&cuFuncSetCacheConfig, "cuFuncSetCacheConfig");
            bindFunc(cast(void**)&cuFuncSetSharedMemConfig, "cuFuncSetSharedMemConfig");
            bindFunc(cast(void**)&cuLaunchKernel, "cuLaunchKernel");
            bindFunc(cast(void**)&cuOccupancyMaxActiveBlocksPerMultiprocessor, "cuOccupancyMaxActiveBlocksPerMultiprocessor");
            bindFunc(cast(void**)&cuOccupancyMaxPotentialBlockSize, "cuOccupancyMaxPotentialBlockSize");
            bindFunc(cast(void**)&cuTexRefSetArray, "cuTexRefSetArray");
            bindFunc(cast(void**)&cuTexRefSetMipmappedArray, "cuTexRefSetMipmappedArray");
            bindFunc(cast(void**)&cuTexRefSetAddress, "cuTexRefSetAddress_v2");
            bindFunc(cast(void**)&cuTexRefSetAddress2D, "cuTexRefSetAddress2D_v3");
            bindFunc(cast(void**)&cuTexRefSetFormat, "cuTexRefSetFormat");
            bindFunc(cast(void**)&cuTexRefSetAddressMode, "cuTexRefSetAddressMode");
            bindFunc(cast(void**)&cuTexRefSetFilterMode, "cuTexRefSetFilterMode");
            bindFunc(cast(void**)&cuTexRefSetMipmapFilterMode, "cuTexRefSetMipmapFilterMode");
            bindFunc(cast(void**)&cuTexRefSetMipmapLevelBias, "cuTexRefSetMipmapLevelBias");
            bindFunc(cast(void**)&cuTexRefSetMipmapLevelClamp, "cuTexRefSetMipmapLevelClamp");
            bindFunc(cast(void**)&cuTexRefSetMaxAnisotropy, "cuTexRefSetMaxAnisotropy");
            bindFunc(cast(void**)&cuTexRefSetFlags, "cuTexRefSetFlags");
            bindFunc(cast(void**)&cuTexRefGetAddress, "cuTexRefGetAddress_v2");
            bindFunc(cast(void**)&cuTexRefGetArray, "cuTexRefGetArray");
            bindFunc(cast(void**)&cuTexRefGetMipmappedArray, "cuTexRefGetMipmappedArray");
            bindFunc(cast(void**)&cuTexRefGetAddressMode, "cuTexRefGetAddressMode");
            bindFunc(cast(void**)&cuTexRefGetFilterMode, "cuTexRefGetFilterMode");
            bindFunc(cast(void**)&cuTexRefGetFormat, "cuTexRefGetFormat");
            bindFunc(cast(void**)&cuTexRefGetMipmapFilterMode, "cuTexRefGetMipmapFilterMode");
            bindFunc(cast(void**)&cuTexRefGetMipmapLevelBias, "cuTexRefGetMipmapLevelBias");
            bindFunc(cast(void**)&cuTexRefGetMipmapLevelClamp, "cuTexRefGetMipmapLevelClamp");
            bindFunc(cast(void**)&cuTexRefGetMaxAnisotropy, "cuTexRefGetMaxAnisotropy");
            bindFunc(cast(void**)&cuTexRefGetFlags, "cuTexRefGetFlags");
            bindFunc(cast(void**)&cuSurfRefSetArray, "cuSurfRefSetArray");
            bindFunc(cast(void**)&cuSurfRefGetArray, "cuSurfRefGetArray");
            bindFunc(cast(void**)&cuTexObjectCreate, "cuTexObjectCreate");
            bindFunc(cast(void**)&cuTexObjectDestroy, "cuTexObjectDestroy");
            bindFunc(cast(void**)&cuTexObjectGetResourceDesc, "cuTexObjectGetResourceDesc");
            bindFunc(cast(void**)&cuTexObjectGetTextureDesc, "cuTexObjectGetTextureDesc");
            bindFunc(cast(void**)&cuTexObjectGetResourceViewDesc, "cuTexObjectGetResourceViewDesc");
            bindFunc(cast(void**)&cuSurfObjectCreate, "cuSurfObjectCreate");
            bindFunc(cast(void**)&cuSurfObjectDestroy, "cuSurfObjectDestroy");
            bindFunc(cast(void**)&cuSurfObjectGetResourceDesc, "cuSurfObjectGetResourceDesc");
            bindFunc(cast(void**)&cuDeviceCanAccessPeer, "cuDeviceCanAccessPeer");
            bindFunc(cast(void**)&cuCtxEnablePeerAccess, "cuCtxEnablePeerAccess");
            bindFunc(cast(void**)&cuCtxDisablePeerAccess, "cuCtxDisablePeerAccess");
            bindFunc(cast(void**)&cuGraphicsUnregisterResource, "cuGraphicsUnregisterResource");
            bindFunc(cast(void**)&cuGraphicsSubResourceGetMappedArray, "cuGraphicsSubResourceGetMappedArray");
            bindFunc(cast(void**)&cuGraphicsResourceGetMappedMipmappedArray, "cuGraphicsResourceGetMappedMipmappedArray");
            bindFunc(cast(void**)&cuGraphicsResourceGetMappedPointer, "cuGraphicsResourceGetMappedPointer_v2");
            bindFunc(cast(void**)&cuGraphicsResourceSetMapFlags, "cuGraphicsResourceSetMapFlags_v2");
            bindFunc(cast(void**)&cuGraphicsMapResources, "cuGraphicsMapResources");
            bindFunc(cast(void**)&cuGraphicsUnmapResources, "cuGraphicsUnmapResources");
            bindFunc(cast(void**)&cuGetExportTable, "cuGetExportTable");
        }
    }

    public
    {
        this()
        {
            super(libNames);
        }
    }
}


__gshared DerelictCUDADriverLoader DerelictCUDADriver;

shared static this()
{
    DerelictCUDADriver = new DerelictCUDADriverLoader();
}
