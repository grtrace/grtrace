/*
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module derelict.cuda.runtimeapi;

/*
 * CUDA Runtime API
 * Translation of cuda_runtime_api.h and headers included by it
 */

// Current API version supported by DerelictCUDA is 6.5
enum CUDART_VERSION = 6050;

import derelict.util.loader;

private
{
    import derelict.util.system;

    static if(Derelict_OS_Windows)
        enum libNames = "cudart32_65.dll,cudart64_65.dll";
    else static if (Derelict_OS_Linux)
    {
        version(X86)
            enum libNames = "libcudart.so,libcudart.so.6.5,libcudart.so.7.0,/opt/cuda/lib/libcudart.so";
        else version(X86_64)
            enum libNames = "libcudart.so,libcudart.so.6.5,libcudart.so.7.0,/opt/cuda/lib64/libcudart.so,/usr/lib/x86_64-linux-gnu/libcudart.so.6.5";
        else
            static assert(0, "Need to implement CUDA libNames for this arch.");
    }
    else
        static assert(0, "Need to implement CUDA libNames for this operating system.");
}


// device_types.h

alias cudaRoundMode = int;
enum : cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
}

// driver_types.h

enum cudaHostAllocDefault           = 0x00;
enum cudaHostAllocPortable          = 0x01;
enum cudaHostAllocMapped            = 0x02;
enum cudaHostAllocWriteCombined     = 0x04;
enum cudaHostRegisterDefault        = 0x00;
enum cudaHostRegisterPortable       = 0x01;
enum cudaHostRegisterMapped         = 0x02;
enum cudaPeerAccessDefault          = 0x00;
enum cudaStreamDefault              = 0x00;
enum cudaStreamNonBlocking          = 0x01;
enum cudaEventDefault               = 0x00;
enum cudaEventBlockingSync          = 0x01;
enum cudaEventDisableTiming         = 0x02;
enum cudaEventInterprocess          = 0x04;
enum cudaDeviceScheduleAuto         = 0x00;
enum cudaDeviceScheduleSpin         = 0x01;
enum cudaDeviceScheduleYield        = 0x02;
enum cudaDeviceScheduleBlockingSync = 0x04;
enum cudaDeviceBlockingSync         = 0x04;
enum cudaDeviceScheduleMask         = 0x07;
enum cudaDeviceMapHost              = 0x08;
enum cudaDeviceLmemResizeToMax      = 0x10;
enum cudaDeviceMask                 = 0x1f;
enum cudaArrayDefault               = 0x00;
enum cudaArrayLayered               = 0x01;
enum cudaArraySurfaceLoadStore      = 0x02;
enum cudaArrayCubemap               = 0x04;
enum cudaArrayTextureGather         = 0x08;
enum cudaIpcMemLazyEnablePeerAccess = 0x01;
enum cudaMemAttachGlobal            = 0x01;
enum cudaMemAttachHost              = 0x02;
enum cudaMemAttachSingle            = 0x04;

alias cudaError = int;
enum : cudaError
{
    cudaSuccess                           =      0,
    cudaErrorMissingConfiguration         =      1,
    cudaErrorMemoryAllocation             =      2,
    cudaErrorInitializationError          =      3,
    cudaErrorLaunchFailure                =      4,
    cudaErrorPriorLaunchFailure           =      5,
    cudaErrorLaunchTimeout                =      6,
    cudaErrorLaunchOutOfResources         =      7,
    cudaErrorInvalidDeviceFunction        =      8,
    cudaErrorInvalidConfiguration         =      9,
    cudaErrorInvalidDevice                =     10,
    cudaErrorInvalidValue                 =     11,
    cudaErrorInvalidPitchValue            =     12,
    cudaErrorInvalidSymbol                =     13,
    cudaErrorMapBufferObjectFailed        =     14,
    cudaErrorUnmapBufferObjectFailed      =     15,
    cudaErrorInvalidHostPointer           =     16,
    cudaErrorInvalidDevicePointer         =     17,
    cudaErrorInvalidTexture               =     18,
    cudaErrorInvalidTextureBinding        =     19,
    cudaErrorInvalidChannelDescriptor     =     20,
    cudaErrorInvalidMemcpyDirection       =     21,
    cudaErrorAddressOfConstant            =     22,
    cudaErrorTextureFetchFailed           =     23,
    cudaErrorTextureNotBound              =     24,
    cudaErrorSynchronizationError         =     25,
    cudaErrorInvalidFilterSetting         =     26,
    cudaErrorInvalidNormSetting           =     27,
    cudaErrorMixedDeviceExecution         =     28,
    cudaErrorCudartUnloading              =     29,
    cudaErrorUnknown                      =     30,
    cudaErrorNotYetImplemented            =     31,
    cudaErrorMemoryValueTooLarge          =     32,
    cudaErrorInvalidResourceHandle        =     33,
    cudaErrorNotReady                     =     34,
    cudaErrorInsufficientDriver           =     35,
    cudaErrorSetOnActiveProcess           =     36,
    cudaErrorInvalidSurface               =     37,
    cudaErrorNoDevice                     =     38,
    cudaErrorECCUncorrectable             =     39,
    cudaErrorSharedObjectSymbolNotFound   =     40,
    cudaErrorSharedObjectInitFailed       =     41,
    cudaErrorUnsupportedLimit             =     42,
    cudaErrorDuplicateVariableName        =     43,
    cudaErrorDuplicateTextureName         =     44,
    cudaErrorDuplicateSurfaceName         =     45,
    cudaErrorDevicesUnavailable           =     46,
    cudaErrorInvalidKernelImage           =     47,
    cudaErrorNoKernelImageForDevice       =     48,
    cudaErrorIncompatibleDriverContext    =     49,
    cudaErrorPeerAccessAlreadyEnabled     =     50,
    cudaErrorPeerAccessNotEnabled         =     51,
    cudaErrorDeviceAlreadyInUse           =     54,
    cudaErrorProfilerDisabled             =     55,
    cudaErrorProfilerNotInitialized       =     56,
    cudaErrorProfilerAlreadyStarted       =     57,
    cudaErrorProfilerAlreadyStopped       =     58,
    cudaErrorAssert                       =     59,
    cudaErrorTooManyPeers                 =     60,
    cudaErrorHostMemoryAlreadyRegistered  =     61,
    cudaErrorHostMemoryNotRegistered      =     62,
    cudaErrorOperatingSystem              =     63,
    cudaErrorPeerAccessUnsupported        =     64,
    cudaErrorLaunchMaxDepthExceeded       =     65,
    cudaErrorLaunchFileScopedTex          =     66,
    cudaErrorLaunchFileScopedSurf         =     67,
    cudaErrorSyncDepthExceeded            =     68,
    cudaErrorLaunchPendingCountExceeded   =     69,
    cudaErrorNotPermitted                 =     70,
    cudaErrorNotSupported                 =     71,
    cudaErrorHardwareStackError           =     72,
    cudaErrorIllegalInstruction           =     73,
    cudaErrorMisalignedAddress            =     74,
    cudaErrorInvalidAddressSpace          =     75,
    cudaErrorInvalidPc                    =     76,
    cudaErrorIllegalAddress               =     77,
    cudaErrorInvalidPtx                   =     78,
    cudaErrorInvalidGraphicsContext       =     79,
    cudaErrorStartupFailure               =   0x7f,
    cudaErrorApiFailureBase               =  10000
}

alias cudaChannelFormatKind = int;
enum : cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,
    cudaChannelFormatKindUnsigned         =   1,
    cudaChannelFormatKindFloat            =   2,
    cudaChannelFormatKindNone             =   3
}

struct cudaChannelFormatDesc
{
    int                   x;
    int                   y;
    int                   z;
    int                   w;
    cudaChannelFormatKind f;
}

alias cudaArray_t = void*;
alias cudaArray_const_t = const(void)*;
alias cudaMipmappedArray_t = void*;
alias cudaMipmappedArray_const_t = const(void)*;

alias cudaMemoryType = int;
enum : cudaMemoryType
{
    cudaMemoryTypeHost   = 1,
    cudaMemoryTypeDevice = 2
}

alias cudaMemcpyKind = int;
enum : cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,
    cudaMemcpyHostToDevice        =   1,
    cudaMemcpyDeviceToHost        =   2,
    cudaMemcpyDeviceToDevice      =   3,
    cudaMemcpyDefault             =   4
}

struct cudaPitchedPtr
{
    void   *ptr;
    size_t  pitch;
    size_t  xsize;
    size_t  ysize;
}

struct cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
}

struct cudaPos
{
    size_t x;
    size_t y;
    size_t z;
}

struct cudaMemcpy3DParms
{
    cudaArray_t     srcArray;
    cudaPos         srcPos;
    cudaPitchedPtr  srcPtr;
    cudaArray_t     dstArray;
    cudaPos         dstPos;
    cudaPitchedPtr  dstPtr;
    cudaExtent      extent;
    cudaMemcpyKind  kind;
}

struct cudaMemcpy3DPeerParms
{
    cudaArray_t     srcArray;
    cudaPos         srcPos;
    cudaPitchedPtr  srcPtr;
    int             srcDevice;
    cudaArray_t     dstArray;
    cudaPos         dstPos;
    cudaPitchedPtr  dstPtr;
    int             dstDevice;
    cudaExtent      extent;
}

alias cudaGraphicsRegisterFlags = int;
enum : cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,
    cudaGraphicsRegisterFlagsReadOnly         = 1,
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather    = 8
}

alias cudaGraphicsMapFlags = int;
enum : cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,
    cudaGraphicsMapFlagsReadOnly     = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
}

alias cudaGraphicsCubeFace = int;
enum : cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
}

alias cudaResourceType = int;
enum : cudaResourceType
{
    cudaResourceTypeArray          = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear         = 0x02,
    cudaResourceTypePitch2D        = 0x03
}

alias cudaResourceViewFormat = int;
enum : cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00,
    cudaResViewFormatUnsignedChar1             = 0x01,
    cudaResViewFormatUnsignedChar2             = 0x02,
    cudaResViewFormatUnsignedChar4             = 0x03,
    cudaResViewFormatSignedChar1               = 0x04,
    cudaResViewFormatSignedChar2               = 0x05,
    cudaResViewFormatSignedChar4               = 0x06,
    cudaResViewFormatUnsignedShort1            = 0x07,
    cudaResViewFormatUnsignedShort2            = 0x08,
    cudaResViewFormatUnsignedShort4            = 0x09,
    cudaResViewFormatSignedShort1              = 0x0a,
    cudaResViewFormatSignedShort2              = 0x0b,
    cudaResViewFormatSignedShort4              = 0x0c,
    cudaResViewFormatUnsignedInt1              = 0x0d,
    cudaResViewFormatUnsignedInt2              = 0x0e,
    cudaResViewFormatUnsignedInt4              = 0x0f,
    cudaResViewFormatSignedInt1                = 0x10,
    cudaResViewFormatSignedInt2                = 0x11,
    cudaResViewFormatSignedInt4                = 0x12,
    cudaResViewFormatHalf1                     = 0x13,
    cudaResViewFormatHalf2                     = 0x14,
    cudaResViewFormatHalf4                     = 0x15,
    cudaResViewFormatFloat1                    = 0x16,
    cudaResViewFormatFloat2                    = 0x17,
    cudaResViewFormatFloat4                    = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c,
    cudaResViewFormatSignedBlockCompressed4    = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e,
    cudaResViewFormatSignedBlockCompressed5    = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H   = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22
}

struct cudaResourceDesc
{
    cudaResourceType resType;

    union res_st
    {
        struct array_st
        {
            cudaArray_t array;
        }
        array_st array;

        struct mipmap_st
        {
            cudaMipmappedArray_t mipmap;
        }
        mipmap_st mipmap;

        struct linear_st
        {
            void *devPtr;
            cudaChannelFormatDesc desc;
            size_t sizeInBytes;
        }
        linear_st linear;

        struct pitch2D_st
        {
            void *devPtr;
            cudaChannelFormatDesc desc;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        }
        pitch2D_st pitch2D;
    }
    res_st res;
}

struct cudaResourceViewDesc
{
    cudaResourceViewFormat format;
    size_t                 width;
    size_t                 height;
    size_t                 depth;
    uint                   firstMipmapLevel;
    uint                   lastMipmapLevel;
    uint                   firstLayer;
    uint                   lastLayer;
}

struct cudaPointerAttributes
{
    cudaMemoryType memoryType;
    int device;
    void *devicePointer;
    void *hostPointer;
    int isManaged;
}

struct cudaFuncAttributes
{
   size_t sharedSizeBytes;
   size_t constSizeBytes;
   size_t localSizeBytes;
   int maxThreadsPerBlock;
   int numRegs;
   int ptxVersion;
   int binaryVersion;
   int cacheModeCA;
}

alias cudaFuncCache = int;
enum : cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1     = 2,
    cudaFuncCachePreferEqual  = 3
}

alias cudaSharedMemConfig = int;
enum : cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
}

alias cudaComputeMode = int;
enum : cudaComputeMode
{
    cudaComputeModeDefault          = 0,
    cudaComputeModeExclusive        = 1,
    cudaComputeModeProhibited       = 2,
    cudaComputeModeExclusiveProcess = 3
}


alias cudaLimit = int;
enum : cudaLimit
{
    cudaLimitStackSize                    = 0x00,
    cudaLimitPrintfFifoSize               = 0x01,
    cudaLimitMallocHeapSize               = 0x02,
    cudaLimitDevRuntimeSyncDepth          = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
}

alias cudaOutputMode = int;
enum : cudaOutputMode
{
    cudaKeyValuePair    = 0x00,
    cudaCSV             = 0x01
}

alias cudaDeviceAttr = int;
enum : cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,
    cudaDevAttrMaxBlockDimX                   = 2,
    cudaDevAttrMaxBlockDimY                   = 3,
    cudaDevAttrMaxBlockDimZ                   = 4,
    cudaDevAttrMaxGridDimX                    = 5,
    cudaDevAttrMaxGridDimY                    = 6,
    cudaDevAttrMaxGridDimZ                    = 7,
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,
    cudaDevAttrTotalConstantMemory            = 9,
    cudaDevAttrWarpSize                       = 10,
    cudaDevAttrMaxPitch                       = 11,
    cudaDevAttrMaxRegistersPerBlock           = 12,
    cudaDevAttrClockRate                      = 13,
    cudaDevAttrTextureAlignment               = 14,
    cudaDevAttrGpuOverlap                     = 15,
    cudaDevAttrMultiProcessorCount            = 16,
    cudaDevAttrKernelExecTimeout              = 17,
    cudaDevAttrIntegrated                     = 18,
    cudaDevAttrCanMapHostMemory               = 19,
    cudaDevAttrComputeMode                    = 20,
    cudaDevAttrMaxTexture1DWidth              = 21,
    cudaDevAttrMaxTexture2DWidth              = 22,
    cudaDevAttrMaxTexture2DHeight             = 23,
    cudaDevAttrMaxTexture3DWidth              = 24,
    cudaDevAttrMaxTexture3DHeight             = 25,
    cudaDevAttrMaxTexture3DDepth              = 26,
    cudaDevAttrMaxTexture2DLayeredWidth       = 27,
    cudaDevAttrMaxTexture2DLayeredHeight      = 28,
    cudaDevAttrMaxTexture2DLayeredLayers      = 29,
    cudaDevAttrSurfaceAlignment               = 30,
    cudaDevAttrConcurrentKernels              = 31,
    cudaDevAttrEccEnabled                     = 32,
    cudaDevAttrPciBusId                       = 33,
    cudaDevAttrPciDeviceId                    = 34,
    cudaDevAttrTccDriver                      = 35,
    cudaDevAttrMemoryClockRate                = 36,
    cudaDevAttrGlobalMemoryBusWidth           = 37,
    cudaDevAttrL2CacheSize                    = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39,
    cudaDevAttrAsyncEngineCount               = 40,
    cudaDevAttrUnifiedAddressing              = 41,
    cudaDevAttrMaxTexture1DLayeredWidth       = 42,
    cudaDevAttrMaxTexture1DLayeredLayers      = 43,
    cudaDevAttrMaxTexture2DGatherWidth        = 45,
    cudaDevAttrMaxTexture2DGatherHeight       = 46,
    cudaDevAttrMaxTexture3DWidthAlt           = 47,
    cudaDevAttrMaxTexture3DHeightAlt          = 48,
    cudaDevAttrMaxTexture3DDepthAlt           = 49,
    cudaDevAttrPciDomainId                    = 50,
    cudaDevAttrTexturePitchAlignment          = 51,
    cudaDevAttrMaxTextureCubemapWidth         = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth              = 55,
    cudaDevAttrMaxSurface2DWidth              = 56,
    cudaDevAttrMaxSurface2DHeight             = 57,
    cudaDevAttrMaxSurface3DWidth              = 58,
    cudaDevAttrMaxSurface3DHeight             = 59,
    cudaDevAttrMaxSurface3DDepth              = 60,
    cudaDevAttrMaxSurface1DLayeredWidth       = 61,
    cudaDevAttrMaxSurface1DLayeredLayers      = 62,
    cudaDevAttrMaxSurface2DLayeredWidth       = 63,
    cudaDevAttrMaxSurface2DLayeredHeight      = 64,
    cudaDevAttrMaxSurface2DLayeredLayers      = 65,
    cudaDevAttrMaxSurfaceCubemapWidth         = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth        = 69,
    cudaDevAttrMaxTexture2DLinearWidth        = 70,
    cudaDevAttrMaxTexture2DLinearHeight       = 71,
    cudaDevAttrMaxTexture2DLinearPitch        = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74,
    cudaDevAttrComputeCapabilityMajor         = 75,
    cudaDevAttrComputeCapabilityMinor         = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77,
    cudaDevAttrStreamPrioritiesSupported      = 78,
    cudaDevAttrGlobalL1CacheSupported         = 79,
    cudaDevAttrLocalL1CacheSupported          = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82,
    cudaDevAttrManagedMemory                  = 83,
    cudaDevAttrIsMultiGpuBoard                = 84,
    cudaDevAttrMultiGpuBoardGroupID           = 85
}

struct cudaDeviceProp
{
    char[256]   name;
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int    regsPerBlock;
    int    warpSize;
    size_t memPitch;
    int    maxThreadsPerBlock;
    int[3]    maxThreadsDim;
    int[3]    maxGridSize;
    int    clockRate;
    size_t totalConstMem;
    int    major;
    int    minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int    deviceOverlap;
    int    multiProcessorCount;
    int    kernelExecTimeoutEnabled;
    int    integrated;
    int    canMapHostMemory;
    int    computeMode;
    int    maxTexture1D;
    int    maxTexture1DMipmap;
    int    maxTexture1DLinear;
    int[2]    maxTexture2D;
    int[2]    maxTexture2DMipmap;
    int[3]    maxTexture2DLinear;
    int[2]    maxTexture2DGather;
    int[3]    maxTexture3D;
    int[3]    maxTexture3DAlt;
    int    maxTextureCubemap;
    int[2]    maxTexture1DLayered;
    int[3]    maxTexture2DLayered;
    int[2]    maxTextureCubemapLayered;
    int    maxSurface1D;
    int[2]    maxSurface2D;
    int[3]    maxSurface3D;
    int[2]    maxSurface1DLayered;
    int[3]    maxSurface2DLayered;
    int    maxSurfaceCubemap;
    int[2]    maxSurfaceCubemapLayered;
    size_t surfaceAlignment;
    int    concurrentKernels;
    int    ECCEnabled;
    int    pciBusID;
    int    pciDeviceID;
    int    pciDomainID;
    int    tccDriver;
    int    asyncEngineCount;
    int    unifiedAddressing;
    int    memoryClockRate;
    int    memoryBusWidth;
    int    l2CacheSize;
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;
    int    globalL1CacheSupported;
    int    localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int    regsPerMultiprocessor;
    int    managedMemory;
    int    isMultiGpuBoard;
    int    multiGpuBoardGroupID;
}

static immutable cudaDeviceProp cudaDevicePropDontCare = cudaDeviceProp(
          "\0",
          0,
          0,
          0,
          0,
          0,
          0,
          [0, 0, 0],
          [0, 0, 0],
          0,
          0,
          -1,
          -1,
          0,
          0,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          [0, 0],
          [0, 0],
          [0, 0, 0],
          [0, 0],
          [0, 0, 0],
          [0, 0, 0],
          0,
          [0, 0],
          [0, 0, 0],
          [0, 0],
          0,
          [0, 0],
          [0, 0, 0],
          [0, 0],
          [0, 0, 0],
          0,
          [0, 0],
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0);

enum CUDA_IPC_HANDLE_SIZE = 64;

struct cudaIpcEventHandle_t
{
    char[CUDA_IPC_HANDLE_SIZE] reserved;
}

struct cudaIpcMemHandle_t
{
    char[CUDA_IPC_HANDLE_SIZE] reserved;
}

alias cudaError_t = cudaError;
alias cudaStream_t = void*;
alias cudaEvent_t = void*;
alias cudaGraphicsResource_t = void*;

struct CUuuid_st;
alias cudaUUID_t = CUuuid_st;

alias cudaOutputMode_t = cudaOutputMode;


// surface_types.h

enum cudaSurfaceType1D              = 0x01;
enum cudaSurfaceType2D              = 0x02;
enum cudaSurfaceType3D              = 0x03;
enum cudaSurfaceTypeCubemap         = 0x0C;
enum cudaSurfaceType1DLayered       = 0xF1;
enum cudaSurfaceType2DLayered       = 0xF2;
enum cudaSurfaceTypeCubemapLayered  = 0xFC;

alias cudaSurfaceBoundaryMode = int;
enum : cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap  = 2
}

alias cudaSurfaceFormatMode = int;
enum : cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
}

struct surfaceReference
{
    cudaChannelFormatDesc channelDesc;
}

alias cudaSurfaceObject_t = ulong;


// texture_types.h

enum cudaTextureType1D              = 0x01;
enum cudaTextureType2D              = 0x02;
enum cudaTextureType3D              = 0x03;
enum cudaTextureTypeCubemap         = 0x0C;
enum cudaTextureType1DLayered       = 0xF1;
enum cudaTextureType2DLayered       = 0xF2;
enum cudaTextureTypeCubemapLayered  = 0xFC;

alias cudaTextureAddressMode = int;
enum : cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,
    cudaAddressModeClamp  = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
}

alias cudaTextureFilterMode = int;
enum : cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,
    cudaFilterModeLinear = 1
}

alias cudaTextureReadMode = int;
enum : cudaTextureReadMode
{
    cudaReadModeElementType     = 0,
    cudaReadModeNormalizedFloat = 1
}

struct textureReference
{
    int                          normalized;
    cudaTextureFilterMode   filterMode;
    cudaTextureAddressMode[3]  addressMode;
    cudaChannelFormatDesc channelDesc;
    int                          sRGB;
    uint                 maxAnisotropy;
    cudaTextureFilterMode   mipmapFilterMode;
    float                        mipmapLevelBias;
    float                        minMipmapLevelClamp;
    float                        maxMipmapLevelClamp;
    int[15]                          __cudaReserved;
}

struct cudaTextureDesc
{
    cudaTextureAddressMode[3] addressMode;
    cudaTextureFilterMode  filterMode;
    cudaTextureReadMode    readMode;
    int                         sRGB;
    int                         normalizedCoords;
    uint                maxAnisotropy;
    cudaTextureFilterMode  mipmapFilterMode;
    float                       mipmapLevelBias;
    float                       minMipmapLevelClamp;
    float                       maxMipmapLevelClamp;
}

alias cudaTextureObject_t = ulong;


// vector_types.h
// only dim3 translated

struct dim3
{
    uint x = 1,
         y = 1,
         z = 1;

    this(uint vx = 1, uint vy = 1, uint vz = 1)
    {
        vx = x;
        vy = y;
        vz = z;
    }
};


// cuda_runtime_api.h

extern(System) nothrow
{
    alias cudaStreamCallback_t = void function(cudaStream_t stream, cudaError_t status, void *userData);
}


extern(System) @nogc nothrow
{
    alias da_cudaDeviceReset = cudaError_t function();
    alias da_cudaDeviceSynchronize = cudaError_t function();
    alias da_cudaDeviceSetLimit = cudaError_t function(cudaLimit limit, size_t value);
    alias da_cudaDeviceGetLimit = cudaError_t function(size_t *pValue, cudaLimit limit);
    alias da_cudaDeviceGetCacheConfig = cudaError_t function(cudaFuncCache *pCacheConfig);
    alias da_cudaDeviceGetStreamPriorityRange = cudaError_t function(int *leastPriority, int *greatestPriority);
    alias da_cudaDeviceSetCacheConfig = cudaError_t function(cudaFuncCache cacheConfig);
    alias da_cudaDeviceGetSharedMemConfig = cudaError_t function(cudaSharedMemConfig *pConfig);
    alias da_cudaDeviceSetSharedMemConfig = cudaError_t function(cudaSharedMemConfig config);
    alias da_cudaDeviceGetByPCIBusId = cudaError_t function(int *device, const char *pciBusId);
    alias da_cudaDeviceGetPCIBusId = cudaError_t function(char *pciBusId, int len, int device);
    alias da_cudaIpcGetEventHandle = cudaError_t function(cudaIpcEventHandle_t *handle, cudaEvent_t event);
    alias da_cudaIpcOpenEventHandle = cudaError_t function(cudaEvent_t *event, cudaIpcEventHandle_t handle);
    alias da_cudaIpcGetMemHandle = cudaError_t function(cudaIpcMemHandle_t *handle, void *devPtr);
    alias da_cudaIpcOpenMemHandle = cudaError_t function(void **devPtr, cudaIpcMemHandle_t handle, uint flags);
    alias da_cudaIpcCloseMemHandle = cudaError_t function(void *devPtr);
    alias da_cudaThreadExit = cudaError_t function();
    alias da_cudaThreadSynchronize = cudaError_t function();
    alias da_cudaThreadSetLimit = cudaError_t function(cudaLimit limit, size_t value);
    alias da_cudaThreadGetLimit = cudaError_t function(size_t *pValue, cudaLimit limit);
    alias da_cudaThreadGetCacheConfig = cudaError_t function(cudaFuncCache *pCacheConfig);
    alias da_cudaThreadSetCacheConfig = cudaError_t function(cudaFuncCache cacheConfig);
    alias da_cudaGetLastError = cudaError_t function();
    alias da_cudaPeekAtLastError = cudaError_t function();
    alias da_cudaGetErrorName = const(char)* function(cudaError_t error);
    alias da_cudaGetErrorString = const(char)* function(cudaError_t error);
    alias da_cudaGetDeviceCount = cudaError_t function(int *count);
    alias da_cudaGetDeviceProperties = cudaError_t function(cudaDeviceProp *prop, int device);
    alias da_cudaDeviceGetAttribute = cudaError_t function(int *value, cudaDeviceAttr attr, int device);
    alias da_cudaChooseDevice = cudaError_t function(int *device, const cudaDeviceProp *prop);
    alias da_cudaSetDevice = cudaError_t function(int device);
    alias da_cudaGetDevice = cudaError_t function(int *device);
    alias da_cudaSetValidDevices = cudaError_t function(int *device_arr, int len);
    alias da_cudaSetDeviceFlags = cudaError_t function( uint flags );
    alias da_cudaStreamCreate = cudaError_t function(cudaStream_t *pStream);
    alias da_cudaStreamCreateWithFlags = cudaError_t function(cudaStream_t *pStream, uint flags);
    alias da_cudaStreamCreateWithPriority = cudaError_t function(cudaStream_t *pStream, uint flags, int priority);
    alias da_cudaStreamGetPriority = cudaError_t function(cudaStream_t hStream, int *priority);
    alias da_cudaStreamGetFlags = cudaError_t function(cudaStream_t hStream, uint *flags);
    alias da_cudaStreamDestroy = cudaError_t function(cudaStream_t stream);
    alias da_cudaStreamWaitEvent = cudaError_t function(cudaStream_t stream, cudaEvent_t event, uint flags);
    alias da_cudaStreamAddCallback = cudaError_t function(cudaStream_t stream, cudaStreamCallback_t callback, void *userData, uint flags);
    alias da_cudaStreamSynchronize = cudaError_t function(cudaStream_t stream);
    alias da_cudaStreamQuery = cudaError_t function(cudaStream_t stream);
    alias da_cudaStreamAttachMemAsync = cudaError_t function(cudaStream_t stream, void *devPtr, size_t length, uint flags);
    alias da_cudaEventCreate = cudaError_t function(cudaEvent_t *event);
    alias da_cudaEventCreateWithFlags = cudaError_t function(cudaEvent_t *event, uint flags);
    alias da_cudaEventRecord = cudaError_t function(cudaEvent_t event, cudaStream_t stream = null);
    alias da_cudaEventQuery = cudaError_t function(cudaEvent_t event);
    alias da_cudaEventSynchronize = cudaError_t function(cudaEvent_t event);
    alias da_cudaEventDestroy = cudaError_t function(cudaEvent_t event);
    alias da_cudaEventElapsedTime = cudaError_t function(float *ms, cudaEvent_t start, cudaEvent_t end);
    alias da_cudaConfigureCall = cudaError_t function(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = null);
    alias da_cudaSetupArgument = cudaError_t function(const void *arg, size_t size, size_t offset);
    alias da_cudaFuncSetCacheConfig = cudaError_t function(const void *func, cudaFuncCache cacheConfig);
    alias da_cudaFuncSetSharedMemConfig = cudaError_t function(const void *func, cudaSharedMemConfig config);
    alias da_cudaLaunch = cudaError_t function(const void *func);
    alias da_cudaFuncGetAttributes = cudaError_t function(cudaFuncAttributes *attr, const void *func);
    alias da_cudaSetDoubleForDevice = cudaError_t function(double *d);
    alias da_cudaSetDoubleForHost = cudaError_t function(double *d);
    alias da_cudaOccupancyMaxActiveBlocksPerMultiprocessor = cudaError_t function(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
    alias da_cudaMallocManaged = cudaError_t function(void **devPtr, size_t size, uint flags);
    alias da_cudaMalloc = cudaError_t function(void **devPtr, size_t size);
    alias da_cudaMallocHost = cudaError_t function(void **ptr, size_t size);
    alias da_cudaMallocPitch = cudaError_t function(void **devPtr, size_t *pitch, size_t width, size_t height);
    alias da_cudaMallocArray = cudaError_t function(cudaArray_t *array, const cudaChannelFormatDesc *desc, size_t width, size_t height = 0, uint flags = 0);
    alias da_cudaFree = cudaError_t function(void *devPtr);
    alias da_cudaFreeHost = cudaError_t function(void *ptr);
    alias da_cudaFreeArray = cudaError_t function(cudaArray_t array);
    alias da_cudaFreeMipmappedArray = cudaError_t function(cudaMipmappedArray_t mipmappedArray);
    alias da_cudaHostAlloc = cudaError_t function(void **pHost, size_t size, uint flags);
    alias da_cudaHostRegister = cudaError_t function(void *ptr, size_t size, uint flags);
    alias da_cudaHostUnregister = cudaError_t function(void *ptr);
    alias da_cudaHostGetDevicePointer = cudaError_t function(void **pDevice, void *pHost, uint flags);
    alias da_cudaHostGetFlags = cudaError_t function(uint *pFlags, void *pHost);
    alias da_cudaMalloc3D = cudaError_t function(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent);
    alias da_cudaMalloc3DArray = cudaError_t function(cudaArray_t *array, const cudaChannelFormatDesc* desc, cudaExtent extent, uint flags = 0);
    alias da_cudaMallocMipmappedArray = cudaError_t function(cudaMipmappedArray_t *mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, uint numLevels, uint flags = 0);
    alias da_cudaGetMipmappedArrayLevel = cudaError_t function(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, uint level);
    alias da_cudaMemcpy3D = cudaError_t function(const cudaMemcpy3DParms *p);
    alias da_cudaMemcpy3DPeer = cudaError_t function(const cudaMemcpy3DPeerParms *p);
    alias da_cudaMemcpy3DAsync = cudaError_t function(const cudaMemcpy3DParms *p, cudaStream_t stream = null);
    alias da_cudaMemcpy3DPeerAsync = cudaError_t function(const cudaMemcpy3DPeerParms *p, cudaStream_t stream = null);
    alias da_cudaMemGetInfo = cudaError_t function(size_t *free, size_t *total);
    alias da_cudaArrayGetInfo = cudaError_t function(cudaChannelFormatDesc *desc, cudaExtent *extent, uint *flags, cudaArray_t array);
    alias da_cudaMemcpy = cudaError_t function(void *dst, const void *src, size_t count, cudaMemcpyKind kind);
    alias da_cudaMemcpyPeer = cudaError_t function(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
    alias da_cudaMemcpyToArray = cudaError_t function(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, cudaMemcpyKind kind);
    alias da_cudaMemcpyFromArray = cudaError_t function(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind);
    alias da_cudaMemcpyArrayToArray = cudaError_t function(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
    alias da_cudaMemcpy2D = cudaError_t function(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind);
    alias da_cudaMemcpy2DToArray = cudaError_t function(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind);
    alias da_cudaMemcpy2DFromArray = cudaError_t function(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind);
    alias da_cudaMemcpy2DArrayToArray = cudaError_t function(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
    alias da_cudaMemcpyToSymbol = cudaError_t function(const void *symbol, const void *src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice);
    alias da_cudaMemcpyFromSymbol = cudaError_t function(void *dst, const void *symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
    alias da_cudaMemcpyAsync = cudaError_t function(void *dst, const void *src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpyPeerAsync = cudaError_t function(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = null);
    alias da_cudaMemcpyToArrayAsync = cudaError_t function(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpyFromArrayAsync = cudaError_t function(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpy2DAsync = cudaError_t function(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpy2DToArrayAsync = cudaError_t function(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpy2DFromArrayAsync = cudaError_t function(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpyToSymbolAsync = cudaError_t function(const void *symbol, const void *src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemcpyFromSymbolAsync = cudaError_t function(void *dst, const void *symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = null);
    alias da_cudaMemset = cudaError_t function(void *devPtr, int value, size_t count);
    alias da_cudaMemset2D = cudaError_t function(void *devPtr, size_t pitch, int value, size_t width, size_t height);
    alias da_cudaMemset3D = cudaError_t function(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent);
    alias da_cudaMemsetAsync = cudaError_t function(void *devPtr, int value, size_t count, cudaStream_t stream = null);
    alias da_cudaMemset2DAsync = cudaError_t function(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = null);
    alias da_cudaMemset3DAsync = cudaError_t function(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = null);
    alias da_cudaGetSymbolAddress = cudaError_t function(void **devPtr, const void *symbol);
    alias da_cudaGetSymbolSize = cudaError_t function(size_t *size, const void *symbol);
    alias da_cudaPointerGetAttributes = cudaError_t function(cudaPointerAttributes *attributes, const void *ptr);
    alias da_cudaDeviceCanAccessPeer = cudaError_t function(int *canAccessPeer, int device, int peerDevice);
    alias da_cudaDeviceEnablePeerAccess = cudaError_t function(int peerDevice, uint flags);
    alias da_cudaDeviceDisablePeerAccess = cudaError_t function(int peerDevice);
    alias da_cudaGraphicsUnregisterResource = cudaError_t function(cudaGraphicsResource_t resource);
    alias da_cudaGraphicsResourceSetMapFlags = cudaError_t function(cudaGraphicsResource_t resource, uint flags);
    alias da_cudaGraphicsMapResources = cudaError_t function(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = null);
    alias da_cudaGraphicsUnmapResources = cudaError_t function(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = null);
    alias da_cudaGraphicsResourceGetMappedPointer = cudaError_t function(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
    alias da_cudaGraphicsSubResourceGetMappedArray = cudaError_t function(cudaArray_t *array, cudaGraphicsResource_t resource, uint arrayIndex, uint mipLevel);
    alias da_cudaGraphicsResourceGetMappedMipmappedArray = cudaError_t function(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
    alias da_cudaGetChannelDesc = cudaError_t function(cudaChannelFormatDesc *desc, cudaArray_const_t array);
    alias da_cudaCreateChannelDesc = cudaChannelFormatDesc function(int x, int y, int z, int w, cudaChannelFormatKind f);
    alias da_cudaBindTexture = cudaError_t function(size_t *offset, const textureReference *texref, const void *devPtr, const cudaChannelFormatDesc *desc, size_t size = uint.max);
    alias da_cudaBindTexture2D = cudaError_t function(size_t *offset, const textureReference *texref, const void *devPtr, const cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
    alias da_cudaBindTextureToArray = cudaError_t function(const textureReference *texref, cudaArray_const_t array, const cudaChannelFormatDesc *desc);
    alias da_cudaBindTextureToMipmappedArray = cudaError_t function(const textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc *desc);
    alias da_cudaUnbindTexture = cudaError_t function(const textureReference *texref);
    alias da_cudaGetTextureAlignmentOffset = cudaError_t function(size_t *offset, const textureReference *texref);
    alias da_cudaGetTextureReference = cudaError_t function(const textureReference **texref, const void *symbol);
    alias da_cudaBindSurfaceToArray = cudaError_t function(const surfaceReference *surfref, cudaArray_const_t array, const cudaChannelFormatDesc *desc);
    alias da_cudaGetSurfaceReference = cudaError_t function(const surfaceReference **surfref, const void *symbol);
    alias da_cudaCreateTextureObject = cudaError_t function(cudaTextureObject_t *pTexObject, const cudaResourceDesc *pResDesc, const cudaTextureDesc *pTexDesc, const cudaResourceViewDesc *pResViewDesc);
    alias da_cudaDestroyTextureObject = cudaError_t function(cudaTextureObject_t texObject);
    alias da_cudaGetTextureObjectResourceDesc = cudaError_t function(cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
    alias da_cudaGetTextureObjectTextureDesc = cudaError_t function(cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
    alias da_cudaGetTextureObjectResourceViewDesc = cudaError_t function(cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
    alias da_cudaCreateSurfaceObject = cudaError_t function(cudaSurfaceObject_t *pSurfObject, const cudaResourceDesc *pResDesc);
    alias da_cudaDestroySurfaceObject = cudaError_t function(cudaSurfaceObject_t surfObject);
    alias da_cudaGetSurfaceObjectResourceDesc = cudaError_t function(cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
    alias da_cudaDriverGetVersion = cudaError_t function(int *driverVersion);
    alias da_cudaRuntimeGetVersion = cudaError_t function(int *runtimeVersion);
    alias da_cudaGetExportTable = cudaError_t function(const void **ppExportTable, const cudaUUID_t *pExportTableId);

}

__gshared
{
    da_cudaDeviceReset cudaDeviceReset;
    da_cudaDeviceSynchronize cudaDeviceSynchronize;
    da_cudaDeviceSetLimit cudaDeviceSetLimit;
    da_cudaDeviceGetLimit cudaDeviceGetLimit;
    da_cudaDeviceGetCacheConfig cudaDeviceGetCacheConfig;
    da_cudaDeviceGetStreamPriorityRange cudaDeviceGetStreamPriorityRange;
    da_cudaDeviceSetCacheConfig cudaDeviceSetCacheConfig;
    da_cudaDeviceGetSharedMemConfig cudaDeviceGetSharedMemConfig;
    da_cudaDeviceSetSharedMemConfig cudaDeviceSetSharedMemConfig;
    da_cudaDeviceGetByPCIBusId cudaDeviceGetByPCIBusId;
    da_cudaDeviceGetPCIBusId cudaDeviceGetPCIBusId;
    da_cudaIpcGetEventHandle cudaIpcGetEventHandle;
    da_cudaIpcOpenEventHandle cudaIpcOpenEventHandle;
    da_cudaIpcGetMemHandle cudaIpcGetMemHandle;
    da_cudaIpcOpenMemHandle cudaIpcOpenMemHandle;
    da_cudaIpcCloseMemHandle cudaIpcCloseMemHandle;
    da_cudaThreadExit cudaThreadExit;
    da_cudaThreadSynchronize cudaThreadSynchronize;
    da_cudaThreadSetLimit cudaThreadSetLimit;
    da_cudaThreadGetLimit cudaThreadGetLimit;
    da_cudaThreadGetCacheConfig cudaThreadGetCacheConfig;
    da_cudaThreadSetCacheConfig cudaThreadSetCacheConfig;
    da_cudaGetLastError cudaGetLastError;
    da_cudaPeekAtLastError cudaPeekAtLastError;
    da_cudaGetErrorName cudaGetErrorName;
    da_cudaGetErrorString cudaGetErrorString;
    da_cudaGetDeviceCount cudaGetDeviceCount;
    da_cudaGetDeviceProperties cudaGetDeviceProperties;
    da_cudaDeviceGetAttribute cudaDeviceGetAttribute;
    da_cudaChooseDevice cudaChooseDevice;
    da_cudaSetDevice cudaSetDevice;
    da_cudaGetDevice cudaGetDevice;
    da_cudaSetValidDevices cudaSetValidDevices;
    da_cudaSetDeviceFlags cudaSetDeviceFlags;
    da_cudaStreamCreate cudaStreamCreate;
    da_cudaStreamCreateWithFlags cudaStreamCreateWithFlags;
    da_cudaStreamCreateWithPriority cudaStreamCreateWithPriority;
    da_cudaStreamGetPriority cudaStreamGetPriority;
    da_cudaStreamGetFlags cudaStreamGetFlags;
    da_cudaStreamDestroy cudaStreamDestroy;
    da_cudaStreamWaitEvent cudaStreamWaitEvent;
    da_cudaStreamAddCallback cudaStreamAddCallback;
    da_cudaStreamSynchronize cudaStreamSynchronize;
    da_cudaStreamQuery cudaStreamQuery;
    da_cudaStreamAttachMemAsync cudaStreamAttachMemAsync;
    da_cudaEventCreate cudaEventCreate;
    da_cudaEventCreateWithFlags cudaEventCreateWithFlags;
    da_cudaEventRecord cudaEventRecord;
    da_cudaEventQuery cudaEventQuery;
    da_cudaEventSynchronize cudaEventSynchronize;
    da_cudaEventDestroy cudaEventDestroy;
    da_cudaEventElapsedTime cudaEventElapsedTime;
    da_cudaConfigureCall cudaConfigureCall;
    da_cudaSetupArgument cudaSetupArgument;
    da_cudaFuncSetCacheConfig cudaFuncSetCacheConfig;
    da_cudaFuncSetSharedMemConfig cudaFuncSetSharedMemConfig;
    da_cudaLaunch cudaLaunch;
    da_cudaFuncGetAttributes cudaFuncGetAttributes;
    da_cudaSetDoubleForDevice cudaSetDoubleForDevice;
    da_cudaSetDoubleForHost cudaSetDoubleForHost;
    da_cudaOccupancyMaxActiveBlocksPerMultiprocessor cudaOccupancyMaxActiveBlocksPerMultiprocessor;
    da_cudaMallocManaged cudaMallocManaged;
    da_cudaMalloc cudaMalloc;
    da_cudaMallocHost cudaMallocHost;
    da_cudaMallocPitch cudaMallocPitch;
    da_cudaMallocArray cudaMallocArray;
    da_cudaFree cudaFree;
    da_cudaFreeHost cudaFreeHost;
    da_cudaFreeArray cudaFreeArray;
    da_cudaFreeMipmappedArray cudaFreeMipmappedArray;
    da_cudaHostAlloc cudaHostAlloc;
    da_cudaHostRegister cudaHostRegister;
    da_cudaHostUnregister cudaHostUnregister;
    da_cudaHostGetDevicePointer cudaHostGetDevicePointer;
    da_cudaHostGetFlags cudaHostGetFlags;
    da_cudaMalloc3D cudaMalloc3D;
    da_cudaMalloc3DArray cudaMalloc3DArray;
    da_cudaMallocMipmappedArray cudaMallocMipmappedArray;
    da_cudaGetMipmappedArrayLevel cudaGetMipmappedArrayLevel;
    da_cudaMemcpy3D cudaMemcpy3D;
    da_cudaMemcpy3DPeer cudaMemcpy3DPeer;
    da_cudaMemcpy3DAsync cudaMemcpy3DAsync;
    da_cudaMemcpy3DPeerAsync cudaMemcpy3DPeerAsync;
    da_cudaMemGetInfo cudaMemGetInfo;
    da_cudaArrayGetInfo cudaArrayGetInfo;
    da_cudaMemcpy cudaMemcpy;
    da_cudaMemcpyPeer cudaMemcpyPeer;
    da_cudaMemcpyToArray cudaMemcpyToArray;
    da_cudaMemcpyFromArray cudaMemcpyFromArray;
    da_cudaMemcpyArrayToArray cudaMemcpyArrayToArray;
    da_cudaMemcpy2D cudaMemcpy2D;
    da_cudaMemcpy2DToArray cudaMemcpy2DToArray;
    da_cudaMemcpy2DFromArray cudaMemcpy2DFromArray;
    da_cudaMemcpy2DArrayToArray cudaMemcpy2DArrayToArray;
    da_cudaMemcpyToSymbol cudaMemcpyToSymbol;
    da_cudaMemcpyFromSymbol cudaMemcpyFromSymbol;
    da_cudaMemcpyAsync cudaMemcpyAsync;
    da_cudaMemcpyPeerAsync cudaMemcpyPeerAsync;
    da_cudaMemcpyToArrayAsync cudaMemcpyToArrayAsync;
    da_cudaMemcpyFromArrayAsync cudaMemcpyFromArrayAsync;
    da_cudaMemcpy2DAsync cudaMemcpy2DAsync;
    da_cudaMemcpy2DToArrayAsync cudaMemcpy2DToArrayAsync;
    da_cudaMemcpy2DFromArrayAsync cudaMemcpy2DFromArrayAsync;
    da_cudaMemcpyToSymbolAsync cudaMemcpyToSymbolAsync;
    da_cudaMemcpyFromSymbolAsync cudaMemcpyFromSymbolAsync;
    da_cudaMemset cudaMemset;
    da_cudaMemset2D cudaMemset2D;
    da_cudaMemset3D cudaMemset3D;
    da_cudaMemsetAsync cudaMemsetAsync;
    da_cudaMemset2DAsync cudaMemset2DAsync;
    da_cudaMemset3DAsync cudaMemset3DAsync;
    da_cudaGetSymbolAddress cudaGetSymbolAddress;
    da_cudaGetSymbolSize cudaGetSymbolSize;
    da_cudaPointerGetAttributes cudaPointerGetAttributes;
    da_cudaDeviceCanAccessPeer cudaDeviceCanAccessPeer;
    da_cudaDeviceEnablePeerAccess cudaDeviceEnablePeerAccess;
    da_cudaDeviceDisablePeerAccess cudaDeviceDisablePeerAccess;
    da_cudaGraphicsUnregisterResource cudaGraphicsUnregisterResource;
    da_cudaGraphicsResourceSetMapFlags cudaGraphicsResourceSetMapFlags;
    da_cudaGraphicsMapResources cudaGraphicsMapResources;
    da_cudaGraphicsUnmapResources cudaGraphicsUnmapResources;
    da_cudaGraphicsResourceGetMappedPointer cudaGraphicsResourceGetMappedPointer;
    da_cudaGraphicsSubResourceGetMappedArray cudaGraphicsSubResourceGetMappedArray;
    da_cudaGraphicsResourceGetMappedMipmappedArray cudaGraphicsResourceGetMappedMipmappedArray;
    da_cudaGetChannelDesc cudaGetChannelDesc;
    da_cudaCreateChannelDesc cudaCreateChannelDesc;
    da_cudaBindTexture cudaBindTexture;
    da_cudaBindTexture2D cudaBindTexture2D;
    da_cudaBindTextureToArray cudaBindTextureToArray;
    da_cudaBindTextureToMipmappedArray cudaBindTextureToMipmappedArray;
    da_cudaUnbindTexture cudaUnbindTexture;
    da_cudaGetTextureAlignmentOffset cudaGetTextureAlignmentOffset;
    da_cudaGetTextureReference cudaGetTextureReference;
    da_cudaBindSurfaceToArray cudaBindSurfaceToArray;
    da_cudaGetSurfaceReference cudaGetSurfaceReference;
    da_cudaCreateTextureObject cudaCreateTextureObject;
    da_cudaDestroyTextureObject cudaDestroyTextureObject;
    da_cudaGetTextureObjectResourceDesc cudaGetTextureObjectResourceDesc;
    da_cudaGetTextureObjectTextureDesc cudaGetTextureObjectTextureDesc;
    da_cudaGetTextureObjectResourceViewDesc cudaGetTextureObjectResourceViewDesc;
    da_cudaCreateSurfaceObject cudaCreateSurfaceObject;
    da_cudaDestroySurfaceObject cudaDestroySurfaceObject;
    da_cudaGetSurfaceObjectResourceDesc cudaGetSurfaceObjectResourceDesc;
    da_cudaDriverGetVersion cudaDriverGetVersion;
    da_cudaRuntimeGetVersion cudaRuntimeGetVersion;
    da_cudaGetExportTable cudaGetExportTable;
}

// Runtime API loader
class DerelictCUDARuntimeLoader : SharedLibLoader
{
    protected
    {
        override void loadSymbols()
        {
            bindFunc(cast(void**)&cudaDeviceReset, "cudaDeviceReset");
            bindFunc(cast(void**)&cudaDeviceSynchronize, "cudaDeviceSynchronize");
            bindFunc(cast(void**)&cudaDeviceSetLimit, "cudaDeviceSetLimit");
            bindFunc(cast(void**)&cudaDeviceGetLimit, "cudaDeviceGetLimit");
            bindFunc(cast(void**)&cudaDeviceGetCacheConfig, "cudaDeviceGetCacheConfig");
            bindFunc(cast(void**)&cudaDeviceGetStreamPriorityRange, "cudaDeviceGetStreamPriorityRange");
            bindFunc(cast(void**)&cudaDeviceSetCacheConfig, "cudaDeviceSetCacheConfig");
            bindFunc(cast(void**)&cudaDeviceGetSharedMemConfig, "cudaDeviceGetSharedMemConfig");
            bindFunc(cast(void**)&cudaDeviceSetSharedMemConfig, "cudaDeviceSetSharedMemConfig");
            bindFunc(cast(void**)&cudaDeviceGetByPCIBusId, "cudaDeviceGetByPCIBusId");
            bindFunc(cast(void**)&cudaDeviceGetPCIBusId, "cudaDeviceGetPCIBusId");
            bindFunc(cast(void**)&cudaIpcGetEventHandle, "cudaIpcGetEventHandle");
            bindFunc(cast(void**)&cudaIpcOpenEventHandle, "cudaIpcOpenEventHandle");
            bindFunc(cast(void**)&cudaIpcGetMemHandle, "cudaIpcGetMemHandle");
            bindFunc(cast(void**)&cudaIpcOpenMemHandle, "cudaIpcOpenMemHandle");
            bindFunc(cast(void**)&cudaIpcCloseMemHandle, "cudaIpcCloseMemHandle");
            bindFunc(cast(void**)&cudaThreadExit, "cudaThreadExit");
            bindFunc(cast(void**)&cudaThreadSynchronize, "cudaThreadSynchronize");
            bindFunc(cast(void**)&cudaThreadSetLimit, "cudaThreadSetLimit");
            bindFunc(cast(void**)&cudaThreadGetLimit, "cudaThreadGetLimit");
            bindFunc(cast(void**)&cudaThreadGetCacheConfig, "cudaThreadGetCacheConfig");
            bindFunc(cast(void**)&cudaThreadSetCacheConfig, "cudaThreadSetCacheConfig");
            bindFunc(cast(void**)&cudaGetLastError, "cudaGetLastError");
            bindFunc(cast(void**)&cudaPeekAtLastError, "cudaPeekAtLastError");
            bindFunc(cast(void**)&cudaGetErrorName, "cudaGetErrorName");
            bindFunc(cast(void**)&cudaGetErrorString, "cudaGetErrorString");
            bindFunc(cast(void**)&cudaGetDeviceCount, "cudaGetDeviceCount");
            bindFunc(cast(void**)&cudaGetDeviceProperties, "cudaGetDeviceProperties");
            bindFunc(cast(void**)&cudaDeviceGetAttribute, "cudaDeviceGetAttribute");
            bindFunc(cast(void**)&cudaChooseDevice, "cudaChooseDevice");
            bindFunc(cast(void**)&cudaSetDevice, "cudaSetDevice");
            bindFunc(cast(void**)&cudaGetDevice, "cudaGetDevice");
            bindFunc(cast(void**)&cudaSetValidDevices, "cudaSetValidDevices");
            bindFunc(cast(void**)&cudaSetDeviceFlags, "cudaSetDeviceFlags");
            bindFunc(cast(void**)&cudaStreamCreate, "cudaStreamCreate");
            bindFunc(cast(void**)&cudaStreamCreateWithFlags, "cudaStreamCreateWithFlags");
            bindFunc(cast(void**)&cudaStreamCreateWithPriority, "cudaStreamCreateWithPriority");
            bindFunc(cast(void**)&cudaStreamGetPriority, "cudaStreamGetPriority");
            bindFunc(cast(void**)&cudaStreamGetFlags, "cudaStreamGetFlags");
            bindFunc(cast(void**)&cudaStreamDestroy, "cudaStreamDestroy");
            bindFunc(cast(void**)&cudaStreamWaitEvent, "cudaStreamWaitEvent");
            bindFunc(cast(void**)&cudaStreamAddCallback, "cudaStreamAddCallback");
            bindFunc(cast(void**)&cudaStreamSynchronize, "cudaStreamSynchronize");
            bindFunc(cast(void**)&cudaStreamQuery, "cudaStreamQuery");
            bindFunc(cast(void**)&cudaStreamAttachMemAsync, "cudaStreamAttachMemAsync");
            bindFunc(cast(void**)&cudaEventCreate, "cudaEventCreate");
            bindFunc(cast(void**)&cudaEventCreateWithFlags, "cudaEventCreateWithFlags");
            bindFunc(cast(void**)&cudaEventRecord, "cudaEventRecord");
            bindFunc(cast(void**)&cudaEventQuery, "cudaEventQuery");
            bindFunc(cast(void**)&cudaEventSynchronize, "cudaEventSynchronize");
            bindFunc(cast(void**)&cudaEventDestroy, "cudaEventDestroy");
            bindFunc(cast(void**)&cudaEventElapsedTime, "cudaEventElapsedTime");
            bindFunc(cast(void**)&cudaConfigureCall, "cudaConfigureCall");
            bindFunc(cast(void**)&cudaSetupArgument, "cudaSetupArgument");
            bindFunc(cast(void**)&cudaFuncSetCacheConfig, "cudaFuncSetCacheConfig");
            bindFunc(cast(void**)&cudaFuncSetSharedMemConfig, "cudaFuncSetSharedMemConfig");
            bindFunc(cast(void**)&cudaLaunch, "cudaLaunch");
            bindFunc(cast(void**)&cudaFuncGetAttributes, "cudaFuncGetAttributes");
            bindFunc(cast(void**)&cudaSetDoubleForDevice, "cudaSetDoubleForDevice");
            bindFunc(cast(void**)&cudaSetDoubleForHost, "cudaSetDoubleForHost");
            bindFunc(cast(void**)&cudaOccupancyMaxActiveBlocksPerMultiprocessor, "cudaOccupancyMaxActiveBlocksPerMultiprocessor");
            bindFunc(cast(void**)&cudaMallocManaged, "cudaMallocManaged");
            bindFunc(cast(void**)&cudaMalloc, "cudaMalloc");
            bindFunc(cast(void**)&cudaMallocHost, "cudaMallocHost");
            bindFunc(cast(void**)&cudaMallocPitch, "cudaMallocPitch");
            bindFunc(cast(void**)&cudaMallocArray, "cudaMallocArray");
            bindFunc(cast(void**)&cudaFree, "cudaFree");
            bindFunc(cast(void**)&cudaFreeHost, "cudaFreeHost");
            bindFunc(cast(void**)&cudaFreeArray, "cudaFreeArray");
            bindFunc(cast(void**)&cudaFreeMipmappedArray, "cudaFreeMipmappedArray");
            bindFunc(cast(void**)&cudaHostAlloc, "cudaHostAlloc");
            bindFunc(cast(void**)&cudaHostRegister, "cudaHostRegister");
            bindFunc(cast(void**)&cudaHostUnregister, "cudaHostUnregister");
            bindFunc(cast(void**)&cudaHostGetDevicePointer, "cudaHostGetDevicePointer");
            bindFunc(cast(void**)&cudaHostGetFlags, "cudaHostGetFlags");
            bindFunc(cast(void**)&cudaMalloc3D, "cudaMalloc3D");
            bindFunc(cast(void**)&cudaMalloc3DArray, "cudaMalloc3DArray");
            bindFunc(cast(void**)&cudaMallocMipmappedArray, "cudaMallocMipmappedArray");
            bindFunc(cast(void**)&cudaGetMipmappedArrayLevel, "cudaGetMipmappedArrayLevel");
            bindFunc(cast(void**)&cudaMemcpy3D, "cudaMemcpy3D");
            bindFunc(cast(void**)&cudaMemcpy3DPeer, "cudaMemcpy3DPeer");
            bindFunc(cast(void**)&cudaMemcpy3DAsync, "cudaMemcpy3DAsync");
            bindFunc(cast(void**)&cudaMemcpy3DPeerAsync, "cudaMemcpy3DPeerAsync");
            bindFunc(cast(void**)&cudaMemGetInfo, "cudaMemGetInfo");
            bindFunc(cast(void**)&cudaArrayGetInfo, "cudaArrayGetInfo");
            bindFunc(cast(void**)&cudaMemcpy, "cudaMemcpy");
            bindFunc(cast(void**)&cudaMemcpyPeer, "cudaMemcpyPeer");
            bindFunc(cast(void**)&cudaMemcpyToArray, "cudaMemcpyToArray");
            bindFunc(cast(void**)&cudaMemcpyFromArray, "cudaMemcpyFromArray");
            bindFunc(cast(void**)&cudaMemcpyArrayToArray, "cudaMemcpyArrayToArray");
            bindFunc(cast(void**)&cudaMemcpy2D, "cudaMemcpy2D");
            bindFunc(cast(void**)&cudaMemcpy2DToArray, "cudaMemcpy2DToArray");
            bindFunc(cast(void**)&cudaMemcpy2DFromArray, "cudaMemcpy2DFromArray");
            bindFunc(cast(void**)&cudaMemcpy2DArrayToArray, "cudaMemcpy2DArrayToArray");
            bindFunc(cast(void**)&cudaMemcpyToSymbol, "cudaMemcpyToSymbol");
            bindFunc(cast(void**)&cudaMemcpyFromSymbol, "cudaMemcpyFromSymbol");
            bindFunc(cast(void**)&cudaMemcpyAsync, "cudaMemcpyAsync");
            bindFunc(cast(void**)&cudaMemcpyPeerAsync, "cudaMemcpyPeerAsync");
            bindFunc(cast(void**)&cudaMemcpyToArrayAsync, "cudaMemcpyToArrayAsync");
            bindFunc(cast(void**)&cudaMemcpyFromArrayAsync, "cudaMemcpyFromArrayAsync");
            bindFunc(cast(void**)&cudaMemcpy2DAsync, "cudaMemcpy2DAsync");
            bindFunc(cast(void**)&cudaMemcpy2DToArrayAsync, "cudaMemcpy2DToArrayAsync");
            bindFunc(cast(void**)&cudaMemcpy2DFromArrayAsync, "cudaMemcpy2DFromArrayAsync");
            bindFunc(cast(void**)&cudaMemcpyToSymbolAsync, "cudaMemcpyToSymbolAsync");
            bindFunc(cast(void**)&cudaMemcpyFromSymbolAsync, "cudaMemcpyFromSymbolAsync");
            bindFunc(cast(void**)&cudaMemset, "cudaMemset");
            bindFunc(cast(void**)&cudaMemset2D, "cudaMemset2D");
            bindFunc(cast(void**)&cudaMemset3D, "cudaMemset3D");
            bindFunc(cast(void**)&cudaMemsetAsync, "cudaMemsetAsync");
            bindFunc(cast(void**)&cudaMemset2DAsync, "cudaMemset2DAsync");
            bindFunc(cast(void**)&cudaMemset3DAsync, "cudaMemset3DAsync");
            bindFunc(cast(void**)&cudaGetSymbolAddress, "cudaGetSymbolAddress");
            bindFunc(cast(void**)&cudaGetSymbolSize, "cudaGetSymbolSize");
            bindFunc(cast(void**)&cudaPointerGetAttributes, "cudaPointerGetAttributes");
            bindFunc(cast(void**)&cudaDeviceCanAccessPeer, "cudaDeviceCanAccessPeer");
            bindFunc(cast(void**)&cudaDeviceEnablePeerAccess, "cudaDeviceEnablePeerAccess");
            bindFunc(cast(void**)&cudaDeviceDisablePeerAccess, "cudaDeviceDisablePeerAccess");
            bindFunc(cast(void**)&cudaGraphicsUnregisterResource, "cudaGraphicsUnregisterResource");
            bindFunc(cast(void**)&cudaGraphicsResourceSetMapFlags, "cudaGraphicsResourceSetMapFlags");
            bindFunc(cast(void**)&cudaGraphicsMapResources, "cudaGraphicsMapResources");
            bindFunc(cast(void**)&cudaGraphicsUnmapResources, "cudaGraphicsUnmapResources");
            bindFunc(cast(void**)&cudaGraphicsResourceGetMappedPointer, "cudaGraphicsResourceGetMappedPointer");
            bindFunc(cast(void**)&cudaGraphicsSubResourceGetMappedArray, "cudaGraphicsSubResourceGetMappedArray");
            bindFunc(cast(void**)&cudaGraphicsResourceGetMappedMipmappedArray, "cudaGraphicsResourceGetMappedMipmappedArray");
            bindFunc(cast(void**)&cudaGetChannelDesc, "cudaGetChannelDesc");
            bindFunc(cast(void**)&cudaCreateChannelDesc, "cudaCreateChannelDesc");
            bindFunc(cast(void**)&cudaBindTexture, "cudaBindTexture");
            bindFunc(cast(void**)&cudaBindTexture2D, "cudaBindTexture2D");
            bindFunc(cast(void**)&cudaBindTextureToArray, "cudaBindTextureToArray");
            bindFunc(cast(void**)&cudaBindTextureToMipmappedArray, "cudaBindTextureToMipmappedArray");
            bindFunc(cast(void**)&cudaUnbindTexture, "cudaUnbindTexture");
            bindFunc(cast(void**)&cudaGetTextureAlignmentOffset, "cudaGetTextureAlignmentOffset");
            bindFunc(cast(void**)&cudaGetTextureReference, "cudaGetTextureReference");
            bindFunc(cast(void**)&cudaBindSurfaceToArray, "cudaBindSurfaceToArray");
            bindFunc(cast(void**)&cudaGetSurfaceReference, "cudaGetSurfaceReference");
            bindFunc(cast(void**)&cudaCreateTextureObject, "cudaCreateTextureObject");
            bindFunc(cast(void**)&cudaDestroyTextureObject, "cudaDestroyTextureObject");
            bindFunc(cast(void**)&cudaGetTextureObjectResourceDesc, "cudaGetTextureObjectResourceDesc");
            bindFunc(cast(void**)&cudaGetTextureObjectTextureDesc, "cudaGetTextureObjectTextureDesc");
            bindFunc(cast(void**)&cudaGetTextureObjectResourceViewDesc, "cudaGetTextureObjectResourceViewDesc");
            bindFunc(cast(void**)&cudaCreateSurfaceObject, "cudaCreateSurfaceObject");
            bindFunc(cast(void**)&cudaDestroySurfaceObject, "cudaDestroySurfaceObject");
            bindFunc(cast(void**)&cudaGetSurfaceObjectResourceDesc, "cudaGetSurfaceObjectResourceDesc");
            bindFunc(cast(void**)&cudaDriverGetVersion, "cudaDriverGetVersion");
            bindFunc(cast(void**)&cudaRuntimeGetVersion, "cudaRuntimeGetVersion");
            bindFunc(cast(void**)&cudaGetExportTable, "cudaGetExportTable");
        }
    }

    public
    {
        this()
        {
            super(libNames);
        }
    }
}

__gshared DerelictCUDARuntimeLoader DerelictCUDARuntime;

shared static this()
{
    DerelictCUDARuntime = new DerelictCUDARuntimeLoader();
}
